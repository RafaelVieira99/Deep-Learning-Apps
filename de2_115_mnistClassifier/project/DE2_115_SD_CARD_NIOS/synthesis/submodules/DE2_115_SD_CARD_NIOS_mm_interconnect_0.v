// DE2_115_SD_CARD_NIOS_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module DE2_115_SD_CARD_NIOS_mm_interconnect_0 (
		input  wire        altpll_c0_clk,                                                          //                                                     altpll_c0.clk
		input  wire        clk_50_clk_clk,                                                         //                                                    clk_50_clk.clk
		input  wire        video_pll_0_vga_clk_clk,                                                //                                           video_pll_0_vga_clk.clk
		input  wire        altpll_inclk_interface_reset_reset_bridge_in_reset_reset,               //            altpll_inclk_interface_reset_reset_bridge_in_reset.reset
		input  wire        cpu_reset_reset_bridge_in_reset_reset,                                  //                               cpu_reset_reset_bridge_in_reset.reset
		input  wire        onchip_memory2_reset1_reset_bridge_in_reset_reset,                      //                   onchip_memory2_reset1_reset_bridge_in_reset.reset
		input  wire        video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset,    // video_character_buffer_with_dma_0_reset_reset_bridge_in_reset.reset
		input  wire [25:0] cpu_data_master_address,                                                //                                               cpu_data_master.address
		output wire        cpu_data_master_waitrequest,                                            //                                                              .waitrequest
		input  wire [3:0]  cpu_data_master_byteenable,                                             //                                                              .byteenable
		input  wire        cpu_data_master_read,                                                   //                                                              .read
		output wire [31:0] cpu_data_master_readdata,                                               //                                                              .readdata
		output wire        cpu_data_master_readdatavalid,                                          //                                                              .readdatavalid
		input  wire        cpu_data_master_write,                                                  //                                                              .write
		input  wire [31:0] cpu_data_master_writedata,                                              //                                                              .writedata
		input  wire        cpu_data_master_debugaccess,                                            //                                                              .debugaccess
		input  wire [25:0] cpu_instruction_master_address,                                         //                                        cpu_instruction_master.address
		output wire        cpu_instruction_master_waitrequest,                                     //                                                              .waitrequest
		input  wire        cpu_instruction_master_read,                                            //                                                              .read
		output wire [31:0] cpu_instruction_master_readdata,                                        //                                                              .readdata
		output wire        cpu_instruction_master_readdatavalid,                                   //                                                              .readdatavalid
		output wire [1:0]  activations_index_s1_address,                                           //                                          activations_index_s1.address
		output wire        activations_index_s1_write,                                             //                                                              .write
		input  wire [31:0] activations_index_s1_readdata,                                          //                                                              .readdata
		output wire [31:0] activations_index_s1_writedata,                                         //                                                              .writedata
		output wire        activations_index_s1_chipselect,                                        //                                                              .chipselect
		output wire [1:0]  altpll_pll_slave_address,                                               //                                              altpll_pll_slave.address
		output wire        altpll_pll_slave_write,                                                 //                                                              .write
		output wire        altpll_pll_slave_read,                                                  //                                                              .read
		input  wire [31:0] altpll_pll_slave_readdata,                                              //                                                              .readdata
		output wire [31:0] altpll_pll_slave_writedata,                                             //                                                              .writedata
		output wire [22:0] cfi_flash_uas_address,                                                  //                                                 cfi_flash_uas.address
		output wire        cfi_flash_uas_write,                                                    //                                                              .write
		output wire        cfi_flash_uas_read,                                                     //                                                              .read
		input  wire [7:0]  cfi_flash_uas_readdata,                                                 //                                                              .readdata
		output wire [7:0]  cfi_flash_uas_writedata,                                                //                                                              .writedata
		output wire [0:0]  cfi_flash_uas_burstcount,                                               //                                                              .burstcount
		output wire [0:0]  cfi_flash_uas_byteenable,                                               //                                                              .byteenable
		input  wire        cfi_flash_uas_readdatavalid,                                            //                                                              .readdatavalid
		input  wire        cfi_flash_uas_waitrequest,                                              //                                                              .waitrequest
		output wire        cfi_flash_uas_lock,                                                     //                                                              .lock
		output wire        cfi_flash_uas_debugaccess,                                              //                                                              .debugaccess
		output wire [8:0]  clock_crossing_io_s0_address,                                           //                                          clock_crossing_io_s0.address
		output wire        clock_crossing_io_s0_write,                                             //                                                              .write
		output wire        clock_crossing_io_s0_read,                                              //                                                              .read
		input  wire [31:0] clock_crossing_io_s0_readdata,                                          //                                                              .readdata
		output wire [31:0] clock_crossing_io_s0_writedata,                                         //                                                              .writedata
		output wire [0:0]  clock_crossing_io_s0_burstcount,                                        //                                                              .burstcount
		output wire [3:0]  clock_crossing_io_s0_byteenable,                                        //                                                              .byteenable
		input  wire        clock_crossing_io_s0_readdatavalid,                                     //                                                              .readdatavalid
		input  wire        clock_crossing_io_s0_waitrequest,                                       //                                                              .waitrequest
		output wire        clock_crossing_io_s0_debugaccess,                                       //                                                              .debugaccess
		output wire [8:0]  cpu_debug_mem_slave_address,                                            //                                           cpu_debug_mem_slave.address
		output wire        cpu_debug_mem_slave_write,                                              //                                                              .write
		output wire        cpu_debug_mem_slave_read,                                               //                                                              .read
		input  wire [31:0] cpu_debug_mem_slave_readdata,                                           //                                                              .readdata
		output wire [31:0] cpu_debug_mem_slave_writedata,                                          //                                                              .writedata
		output wire [3:0]  cpu_debug_mem_slave_byteenable,                                         //                                                              .byteenable
		input  wire        cpu_debug_mem_slave_waitrequest,                                        //                                                              .waitrequest
		output wire        cpu_debug_mem_slave_debugaccess,                                        //                                                              .debugaccess
		output wire [1:0]  floatdata_output_s1_address,                                            //                                           floatdata_output_s1.address
		output wire        floatdata_output_s1_write,                                              //                                                              .write
		input  wire [31:0] floatdata_output_s1_readdata,                                           //                                                              .readdata
		output wire [31:0] floatdata_output_s1_writedata,                                          //                                                              .writedata
		output wire        floatdata_output_s1_chipselect,                                         //                                                              .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                                    //                                   jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                                      //                                                              .write
		output wire        jtag_uart_avalon_jtag_slave_read,                                       //                                                              .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                                   //                                                              .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                                  //                                                              .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                                //                                                              .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                                 //                                                              .chipselect
		output wire [1:0]  key_s1_address,                                                         //                                                        key_s1.address
		output wire        key_s1_write,                                                           //                                                              .write
		input  wire [31:0] key_s1_readdata,                                                        //                                                              .readdata
		output wire [31:0] key_s1_writedata,                                                       //                                                              .writedata
		output wire        key_s1_chipselect,                                                      //                                                              .chipselect
		output wire [1:0]  ledg_s1_address,                                                        //                                                       ledg_s1.address
		output wire        ledg_s1_write,                                                          //                                                              .write
		input  wire [31:0] ledg_s1_readdata,                                                       //                                                              .readdata
		output wire [31:0] ledg_s1_writedata,                                                      //                                                              .writedata
		output wire        ledg_s1_chipselect,                                                     //                                                              .chipselect
		output wire [1:0]  ledr_s1_address,                                                        //                                                       ledr_s1.address
		output wire        ledr_s1_write,                                                          //                                                              .write
		input  wire [31:0] ledr_s1_readdata,                                                       //                                                              .readdata
		output wire [31:0] ledr_s1_writedata,                                                      //                                                              .writedata
		output wire        ledr_s1_chipselect,                                                     //                                                              .chipselect
		output wire [15:0] onchip_memory2_s1_address,                                              //                                             onchip_memory2_s1.address
		output wire        onchip_memory2_s1_write,                                                //                                                              .write
		input  wire [31:0] onchip_memory2_s1_readdata,                                             //                                                              .readdata
		output wire [31:0] onchip_memory2_s1_writedata,                                            //                                                              .writedata
		output wire [3:0]  onchip_memory2_s1_byteenable,                                           //                                                              .byteenable
		output wire        onchip_memory2_s1_chipselect,                                           //                                                              .chipselect
		output wire        onchip_memory2_s1_clken,                                                //                                                              .clken
		output wire [1:0]  pixel_index_s1_address,                                                 //                                                pixel_index_s1.address
		output wire        pixel_index_s1_write,                                                   //                                                              .write
		input  wire [31:0] pixel_index_s1_readdata,                                                //                                                              .readdata
		output wire [31:0] pixel_index_s1_writedata,                                               //                                                              .writedata
		output wire        pixel_index_s1_chipselect,                                              //                                                              .chipselect
		output wire [1:0]  results_input_s1_address,                                               //                                              results_input_s1.address
		input  wire [31:0] results_input_s1_readdata,                                              //                                                              .readdata
		output wire [1:0]  sw_s1_address,                                                          //                                                         sw_s1.address
		output wire        sw_s1_write,                                                            //                                                              .write
		input  wire [31:0] sw_s1_readdata,                                                         //                                                              .readdata
		output wire [31:0] sw_s1_writedata,                                                        //                                                              .writedata
		output wire        sw_s1_chipselect,                                                       //                                                              .chipselect
		output wire [1:0]  sync_data_s1_address,                                                   //                                                  sync_data_s1.address
		output wire        sync_data_s1_write,                                                     //                                                              .write
		input  wire [31:0] sync_data_s1_readdata,                                                  //                                                              .readdata
		output wire [31:0] sync_data_s1_writedata,                                                 //                                                              .writedata
		output wire        sync_data_s1_chipselect,                                                //                                                              .chipselect
		output wire [12:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_address,     //    video_character_buffer_with_dma_0_avalon_char_buffer_slave.address
		output wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_write,       //                                                              .write
		output wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_read,        //                                                              .read
		input  wire [7:0]  video_character_buffer_with_dma_0_avalon_char_buffer_slave_readdata,    //                                                              .readdata
		output wire [7:0]  video_character_buffer_with_dma_0_avalon_char_buffer_slave_writedata,   //                                                              .writedata
		output wire [0:0]  video_character_buffer_with_dma_0_avalon_char_buffer_slave_byteenable,  //                                                              .byteenable
		input  wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_waitrequest, //                                                              .waitrequest
		output wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_chipselect,  //                                                              .chipselect
		output wire [0:0]  video_character_buffer_with_dma_0_avalon_char_control_slave_address,    //   video_character_buffer_with_dma_0_avalon_char_control_slave.address
		output wire        video_character_buffer_with_dma_0_avalon_char_control_slave_write,      //                                                              .write
		output wire        video_character_buffer_with_dma_0_avalon_char_control_slave_read,       //                                                              .read
		input  wire [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_readdata,   //                                                              .readdata
		output wire [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_writedata,  //                                                              .writedata
		output wire [3:0]  video_character_buffer_with_dma_0_avalon_char_control_slave_byteenable, //                                                              .byteenable
		output wire        video_character_buffer_with_dma_0_avalon_char_control_slave_chipselect, //                                                              .chipselect
		output wire [1:0]  weight_index_s1_address,                                                //                                               weight_index_s1.address
		output wire        weight_index_s1_write,                                                  //                                                              .write
		input  wire [31:0] weight_index_s1_readdata,                                               //                                                              .readdata
		output wire [31:0] weight_index_s1_writedata,                                              //                                                              .writedata
		output wire        weight_index_s1_chipselect                                              //                                                              .chipselect
	);

	wire          cpu_data_master_translator_avalon_universal_master_0_waitrequest;                               // cpu_data_master_agent:av_waitrequest -> cpu_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;                                  // cpu_data_master_agent:av_readdata -> cpu_data_master_translator:uav_readdata
	wire          cpu_data_master_translator_avalon_universal_master_0_debugaccess;                               // cpu_data_master_translator:uav_debugaccess -> cpu_data_master_agent:av_debugaccess
	wire   [25:0] cpu_data_master_translator_avalon_universal_master_0_address;                                   // cpu_data_master_translator:uav_address -> cpu_data_master_agent:av_address
	wire          cpu_data_master_translator_avalon_universal_master_0_read;                                      // cpu_data_master_translator:uav_read -> cpu_data_master_agent:av_read
	wire    [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;                                // cpu_data_master_translator:uav_byteenable -> cpu_data_master_agent:av_byteenable
	wire          cpu_data_master_translator_avalon_universal_master_0_readdatavalid;                             // cpu_data_master_agent:av_readdatavalid -> cpu_data_master_translator:uav_readdatavalid
	wire          cpu_data_master_translator_avalon_universal_master_0_lock;                                      // cpu_data_master_translator:uav_lock -> cpu_data_master_agent:av_lock
	wire          cpu_data_master_translator_avalon_universal_master_0_write;                                     // cpu_data_master_translator:uav_write -> cpu_data_master_agent:av_write
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;                                 // cpu_data_master_translator:uav_writedata -> cpu_data_master_agent:av_writedata
	wire    [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;                                // cpu_data_master_translator:uav_burstcount -> cpu_data_master_agent:av_burstcount
	wire          cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;                        // cpu_instruction_master_agent:av_waitrequest -> cpu_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;                           // cpu_instruction_master_agent:av_readdata -> cpu_instruction_master_translator:uav_readdata
	wire          cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;                        // cpu_instruction_master_translator:uav_debugaccess -> cpu_instruction_master_agent:av_debugaccess
	wire   [25:0] cpu_instruction_master_translator_avalon_universal_master_0_address;                            // cpu_instruction_master_translator:uav_address -> cpu_instruction_master_agent:av_address
	wire          cpu_instruction_master_translator_avalon_universal_master_0_read;                               // cpu_instruction_master_translator:uav_read -> cpu_instruction_master_agent:av_read
	wire    [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;                         // cpu_instruction_master_translator:uav_byteenable -> cpu_instruction_master_agent:av_byteenable
	wire          cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid;                      // cpu_instruction_master_agent:av_readdatavalid -> cpu_instruction_master_translator:uav_readdatavalid
	wire          cpu_instruction_master_translator_avalon_universal_master_0_lock;                               // cpu_instruction_master_translator:uav_lock -> cpu_instruction_master_agent:av_lock
	wire          cpu_instruction_master_translator_avalon_universal_master_0_write;                              // cpu_instruction_master_translator:uav_write -> cpu_instruction_master_agent:av_write
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;                          // cpu_instruction_master_translator:uav_writedata -> cpu_instruction_master_agent:av_writedata
	wire    [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;                         // cpu_instruction_master_translator:uav_burstcount -> cpu_instruction_master_agent:av_burstcount
	wire    [7:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdata;                   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_readdata -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_readdata
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_waitrequest;                // video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_waitrequest -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_waitrequest
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_debugaccess;                // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_debugaccess -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_debugaccess
	wire   [25:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_address;                    // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_address -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_address
	wire    [0:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_byteenable;                 // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_byteenable -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_byteenable
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_read;                       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_read -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_read
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdatavalid;              // video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_readdatavalid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_readdatavalid
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_lock;                       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_lock -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_lock
	wire    [7:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_writedata;                  // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_writedata -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_writedata
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_write;                      // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_write -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_write
	wire    [0:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_burstcount;                 // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_burstcount -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_burstcount
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_valid;               // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_valid
	wire   [79:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_data;                // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_ready;               // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_ready
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_startofpacket;       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_endofpacket;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_valid;            // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_valid
	wire   [79:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_data;             // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_ready;            // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_ready
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_startofpacket;    // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_endofpacket;      // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_valid;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_src_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo:in_valid
	wire    [9:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_data;           // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_src_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo:in_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_ready;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo:in_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_src_ready
	wire   [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdata;                  // video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_readdata -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_readdata
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_waitrequest;               // video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_waitrequest -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_waitrequest
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_debugaccess;               // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_debugaccess -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_debugaccess
	wire   [25:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_address;                   // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_address -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_address
	wire    [3:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_byteenable;                // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_byteenable -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_byteenable
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_read;                      // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_read -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_read
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdatavalid;             // video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_readdatavalid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_readdatavalid
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_lock;                      // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_lock -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_lock
	wire   [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_writedata;                 // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_writedata -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_writedata
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_write;                     // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_write -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_write
	wire    [2:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_burstcount;                // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_burstcount -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_burstcount
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_valid;              // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_valid
	wire  [106:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_data;               // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_ready;              // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_ready
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_startofpacket;      // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_startofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_endofpacket;        // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_endofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_valid;           // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_valid
	wire  [106:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_data;            // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_ready;           // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_ready
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_startofpacket;   // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_startofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_endofpacket;     // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_endofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_valid;         // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_src_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_data;          // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_src_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo:in_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_ready;         // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo:in_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                                          // cmd_mux_001:src_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_valid
	wire  [105:0] cmd_mux_001_src_data;                                                                           // cmd_mux_001:src_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                          // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [17:0] cmd_mux_001_src_channel;                                                                        // cmd_mux_001:src_channel -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                                  // cmd_mux_001:src_startofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                    // cmd_mux_001:src_endofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_endofpacket
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                                  // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                               // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                               // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [25:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                                   // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                                // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                                      // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                             // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                                      // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                                 // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                                     // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                                // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                              // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [106:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                               // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                                      // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                                        // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                           // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [106:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                            // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                           // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                   // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                     // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                          // cmd_mux_002:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [105:0] cmd_mux_002_src_data;                                                                           // cmd_mux_002:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                          // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [17:0] cmd_mux_002_src_channel;                                                                        // cmd_mux_002:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                                  // cmd_mux_002:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                    // cmd_mux_002:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] cpu_debug_mem_slave_agent_m0_readdata;                                                          // cpu_debug_mem_slave_translator:uav_readdata -> cpu_debug_mem_slave_agent:m0_readdata
	wire          cpu_debug_mem_slave_agent_m0_waitrequest;                                                       // cpu_debug_mem_slave_translator:uav_waitrequest -> cpu_debug_mem_slave_agent:m0_waitrequest
	wire          cpu_debug_mem_slave_agent_m0_debugaccess;                                                       // cpu_debug_mem_slave_agent:m0_debugaccess -> cpu_debug_mem_slave_translator:uav_debugaccess
	wire   [25:0] cpu_debug_mem_slave_agent_m0_address;                                                           // cpu_debug_mem_slave_agent:m0_address -> cpu_debug_mem_slave_translator:uav_address
	wire    [3:0] cpu_debug_mem_slave_agent_m0_byteenable;                                                        // cpu_debug_mem_slave_agent:m0_byteenable -> cpu_debug_mem_slave_translator:uav_byteenable
	wire          cpu_debug_mem_slave_agent_m0_read;                                                              // cpu_debug_mem_slave_agent:m0_read -> cpu_debug_mem_slave_translator:uav_read
	wire          cpu_debug_mem_slave_agent_m0_readdatavalid;                                                     // cpu_debug_mem_slave_translator:uav_readdatavalid -> cpu_debug_mem_slave_agent:m0_readdatavalid
	wire          cpu_debug_mem_slave_agent_m0_lock;                                                              // cpu_debug_mem_slave_agent:m0_lock -> cpu_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpu_debug_mem_slave_agent_m0_writedata;                                                         // cpu_debug_mem_slave_agent:m0_writedata -> cpu_debug_mem_slave_translator:uav_writedata
	wire          cpu_debug_mem_slave_agent_m0_write;                                                             // cpu_debug_mem_slave_agent:m0_write -> cpu_debug_mem_slave_translator:uav_write
	wire    [2:0] cpu_debug_mem_slave_agent_m0_burstcount;                                                        // cpu_debug_mem_slave_agent:m0_burstcount -> cpu_debug_mem_slave_translator:uav_burstcount
	wire          cpu_debug_mem_slave_agent_rf_source_valid;                                                      // cpu_debug_mem_slave_agent:rf_source_valid -> cpu_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [106:0] cpu_debug_mem_slave_agent_rf_source_data;                                                       // cpu_debug_mem_slave_agent:rf_source_data -> cpu_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpu_debug_mem_slave_agent_rf_source_ready;                                                      // cpu_debug_mem_slave_agent_rsp_fifo:in_ready -> cpu_debug_mem_slave_agent:rf_source_ready
	wire          cpu_debug_mem_slave_agent_rf_source_startofpacket;                                              // cpu_debug_mem_slave_agent:rf_source_startofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpu_debug_mem_slave_agent_rf_source_endofpacket;                                                // cpu_debug_mem_slave_agent:rf_source_endofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_valid;                                                   // cpu_debug_mem_slave_agent_rsp_fifo:out_valid -> cpu_debug_mem_slave_agent:rf_sink_valid
	wire  [106:0] cpu_debug_mem_slave_agent_rsp_fifo_out_data;                                                    // cpu_debug_mem_slave_agent_rsp_fifo:out_data -> cpu_debug_mem_slave_agent:rf_sink_data
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_ready;                                                   // cpu_debug_mem_slave_agent:rf_sink_ready -> cpu_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                           // cpu_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> cpu_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                             // cpu_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> cpu_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                          // cmd_mux_003:src_valid -> cpu_debug_mem_slave_agent:cp_valid
	wire  [105:0] cmd_mux_003_src_data;                                                                           // cmd_mux_003:src_data -> cpu_debug_mem_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                          // cpu_debug_mem_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [17:0] cmd_mux_003_src_channel;                                                                        // cmd_mux_003:src_channel -> cpu_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                                  // cmd_mux_003:src_startofpacket -> cpu_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                    // cmd_mux_003:src_endofpacket -> cpu_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] altpll_pll_slave_agent_m0_readdata;                                                             // altpll_pll_slave_translator:uav_readdata -> altpll_pll_slave_agent:m0_readdata
	wire          altpll_pll_slave_agent_m0_waitrequest;                                                          // altpll_pll_slave_translator:uav_waitrequest -> altpll_pll_slave_agent:m0_waitrequest
	wire          altpll_pll_slave_agent_m0_debugaccess;                                                          // altpll_pll_slave_agent:m0_debugaccess -> altpll_pll_slave_translator:uav_debugaccess
	wire   [25:0] altpll_pll_slave_agent_m0_address;                                                              // altpll_pll_slave_agent:m0_address -> altpll_pll_slave_translator:uav_address
	wire    [3:0] altpll_pll_slave_agent_m0_byteenable;                                                           // altpll_pll_slave_agent:m0_byteenable -> altpll_pll_slave_translator:uav_byteenable
	wire          altpll_pll_slave_agent_m0_read;                                                                 // altpll_pll_slave_agent:m0_read -> altpll_pll_slave_translator:uav_read
	wire          altpll_pll_slave_agent_m0_readdatavalid;                                                        // altpll_pll_slave_translator:uav_readdatavalid -> altpll_pll_slave_agent:m0_readdatavalid
	wire          altpll_pll_slave_agent_m0_lock;                                                                 // altpll_pll_slave_agent:m0_lock -> altpll_pll_slave_translator:uav_lock
	wire   [31:0] altpll_pll_slave_agent_m0_writedata;                                                            // altpll_pll_slave_agent:m0_writedata -> altpll_pll_slave_translator:uav_writedata
	wire          altpll_pll_slave_agent_m0_write;                                                                // altpll_pll_slave_agent:m0_write -> altpll_pll_slave_translator:uav_write
	wire    [2:0] altpll_pll_slave_agent_m0_burstcount;                                                           // altpll_pll_slave_agent:m0_burstcount -> altpll_pll_slave_translator:uav_burstcount
	wire          altpll_pll_slave_agent_rf_source_valid;                                                         // altpll_pll_slave_agent:rf_source_valid -> altpll_pll_slave_agent_rsp_fifo:in_valid
	wire  [106:0] altpll_pll_slave_agent_rf_source_data;                                                          // altpll_pll_slave_agent:rf_source_data -> altpll_pll_slave_agent_rsp_fifo:in_data
	wire          altpll_pll_slave_agent_rf_source_ready;                                                         // altpll_pll_slave_agent_rsp_fifo:in_ready -> altpll_pll_slave_agent:rf_source_ready
	wire          altpll_pll_slave_agent_rf_source_startofpacket;                                                 // altpll_pll_slave_agent:rf_source_startofpacket -> altpll_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          altpll_pll_slave_agent_rf_source_endofpacket;                                                   // altpll_pll_slave_agent:rf_source_endofpacket -> altpll_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          altpll_pll_slave_agent_rsp_fifo_out_valid;                                                      // altpll_pll_slave_agent_rsp_fifo:out_valid -> altpll_pll_slave_agent:rf_sink_valid
	wire  [106:0] altpll_pll_slave_agent_rsp_fifo_out_data;                                                       // altpll_pll_slave_agent_rsp_fifo:out_data -> altpll_pll_slave_agent:rf_sink_data
	wire          altpll_pll_slave_agent_rsp_fifo_out_ready;                                                      // altpll_pll_slave_agent:rf_sink_ready -> altpll_pll_slave_agent_rsp_fifo:out_ready
	wire          altpll_pll_slave_agent_rsp_fifo_out_startofpacket;                                              // altpll_pll_slave_agent_rsp_fifo:out_startofpacket -> altpll_pll_slave_agent:rf_sink_startofpacket
	wire          altpll_pll_slave_agent_rsp_fifo_out_endofpacket;                                                // altpll_pll_slave_agent_rsp_fifo:out_endofpacket -> altpll_pll_slave_agent:rf_sink_endofpacket
	wire          altpll_pll_slave_agent_rdata_fifo_src_valid;                                                    // altpll_pll_slave_agent:rdata_fifo_src_valid -> altpll_pll_slave_agent_rdata_fifo:in_valid
	wire   [33:0] altpll_pll_slave_agent_rdata_fifo_src_data;                                                     // altpll_pll_slave_agent:rdata_fifo_src_data -> altpll_pll_slave_agent_rdata_fifo:in_data
	wire          altpll_pll_slave_agent_rdata_fifo_src_ready;                                                    // altpll_pll_slave_agent_rdata_fifo:in_ready -> altpll_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                                          // cmd_mux_004:src_valid -> altpll_pll_slave_agent:cp_valid
	wire  [105:0] cmd_mux_004_src_data;                                                                           // cmd_mux_004:src_data -> altpll_pll_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                          // altpll_pll_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [17:0] cmd_mux_004_src_channel;                                                                        // cmd_mux_004:src_channel -> altpll_pll_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                                  // cmd_mux_004:src_startofpacket -> altpll_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                    // cmd_mux_004:src_endofpacket -> altpll_pll_slave_agent:cp_endofpacket
	wire   [31:0] clock_crossing_io_s0_agent_m0_readdata;                                                         // clock_crossing_io_s0_translator:uav_readdata -> clock_crossing_io_s0_agent:m0_readdata
	wire          clock_crossing_io_s0_agent_m0_waitrequest;                                                      // clock_crossing_io_s0_translator:uav_waitrequest -> clock_crossing_io_s0_agent:m0_waitrequest
	wire          clock_crossing_io_s0_agent_m0_debugaccess;                                                      // clock_crossing_io_s0_agent:m0_debugaccess -> clock_crossing_io_s0_translator:uav_debugaccess
	wire   [25:0] clock_crossing_io_s0_agent_m0_address;                                                          // clock_crossing_io_s0_agent:m0_address -> clock_crossing_io_s0_translator:uav_address
	wire    [3:0] clock_crossing_io_s0_agent_m0_byteenable;                                                       // clock_crossing_io_s0_agent:m0_byteenable -> clock_crossing_io_s0_translator:uav_byteenable
	wire          clock_crossing_io_s0_agent_m0_read;                                                             // clock_crossing_io_s0_agent:m0_read -> clock_crossing_io_s0_translator:uav_read
	wire          clock_crossing_io_s0_agent_m0_readdatavalid;                                                    // clock_crossing_io_s0_translator:uav_readdatavalid -> clock_crossing_io_s0_agent:m0_readdatavalid
	wire          clock_crossing_io_s0_agent_m0_lock;                                                             // clock_crossing_io_s0_agent:m0_lock -> clock_crossing_io_s0_translator:uav_lock
	wire   [31:0] clock_crossing_io_s0_agent_m0_writedata;                                                        // clock_crossing_io_s0_agent:m0_writedata -> clock_crossing_io_s0_translator:uav_writedata
	wire          clock_crossing_io_s0_agent_m0_write;                                                            // clock_crossing_io_s0_agent:m0_write -> clock_crossing_io_s0_translator:uav_write
	wire    [2:0] clock_crossing_io_s0_agent_m0_burstcount;                                                       // clock_crossing_io_s0_agent:m0_burstcount -> clock_crossing_io_s0_translator:uav_burstcount
	wire          clock_crossing_io_s0_agent_rf_source_valid;                                                     // clock_crossing_io_s0_agent:rf_source_valid -> clock_crossing_io_s0_agent_rsp_fifo:in_valid
	wire  [106:0] clock_crossing_io_s0_agent_rf_source_data;                                                      // clock_crossing_io_s0_agent:rf_source_data -> clock_crossing_io_s0_agent_rsp_fifo:in_data
	wire          clock_crossing_io_s0_agent_rf_source_ready;                                                     // clock_crossing_io_s0_agent_rsp_fifo:in_ready -> clock_crossing_io_s0_agent:rf_source_ready
	wire          clock_crossing_io_s0_agent_rf_source_startofpacket;                                             // clock_crossing_io_s0_agent:rf_source_startofpacket -> clock_crossing_io_s0_agent_rsp_fifo:in_startofpacket
	wire          clock_crossing_io_s0_agent_rf_source_endofpacket;                                               // clock_crossing_io_s0_agent:rf_source_endofpacket -> clock_crossing_io_s0_agent_rsp_fifo:in_endofpacket
	wire          clock_crossing_io_s0_agent_rsp_fifo_out_valid;                                                  // clock_crossing_io_s0_agent_rsp_fifo:out_valid -> clock_crossing_io_s0_agent:rf_sink_valid
	wire  [106:0] clock_crossing_io_s0_agent_rsp_fifo_out_data;                                                   // clock_crossing_io_s0_agent_rsp_fifo:out_data -> clock_crossing_io_s0_agent:rf_sink_data
	wire          clock_crossing_io_s0_agent_rsp_fifo_out_ready;                                                  // clock_crossing_io_s0_agent:rf_sink_ready -> clock_crossing_io_s0_agent_rsp_fifo:out_ready
	wire          clock_crossing_io_s0_agent_rsp_fifo_out_startofpacket;                                          // clock_crossing_io_s0_agent_rsp_fifo:out_startofpacket -> clock_crossing_io_s0_agent:rf_sink_startofpacket
	wire          clock_crossing_io_s0_agent_rsp_fifo_out_endofpacket;                                            // clock_crossing_io_s0_agent_rsp_fifo:out_endofpacket -> clock_crossing_io_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                          // cmd_mux_005:src_valid -> clock_crossing_io_s0_agent:cp_valid
	wire  [105:0] cmd_mux_005_src_data;                                                                           // cmd_mux_005:src_data -> clock_crossing_io_s0_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                          // clock_crossing_io_s0_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [17:0] cmd_mux_005_src_channel;                                                                        // cmd_mux_005:src_channel -> clock_crossing_io_s0_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                                  // cmd_mux_005:src_startofpacket -> clock_crossing_io_s0_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                    // cmd_mux_005:src_endofpacket -> clock_crossing_io_s0_agent:cp_endofpacket
	wire   [31:0] onchip_memory2_s1_agent_m0_readdata;                                                            // onchip_memory2_s1_translator:uav_readdata -> onchip_memory2_s1_agent:m0_readdata
	wire          onchip_memory2_s1_agent_m0_waitrequest;                                                         // onchip_memory2_s1_translator:uav_waitrequest -> onchip_memory2_s1_agent:m0_waitrequest
	wire          onchip_memory2_s1_agent_m0_debugaccess;                                                         // onchip_memory2_s1_agent:m0_debugaccess -> onchip_memory2_s1_translator:uav_debugaccess
	wire   [25:0] onchip_memory2_s1_agent_m0_address;                                                             // onchip_memory2_s1_agent:m0_address -> onchip_memory2_s1_translator:uav_address
	wire    [3:0] onchip_memory2_s1_agent_m0_byteenable;                                                          // onchip_memory2_s1_agent:m0_byteenable -> onchip_memory2_s1_translator:uav_byteenable
	wire          onchip_memory2_s1_agent_m0_read;                                                                // onchip_memory2_s1_agent:m0_read -> onchip_memory2_s1_translator:uav_read
	wire          onchip_memory2_s1_agent_m0_readdatavalid;                                                       // onchip_memory2_s1_translator:uav_readdatavalid -> onchip_memory2_s1_agent:m0_readdatavalid
	wire          onchip_memory2_s1_agent_m0_lock;                                                                // onchip_memory2_s1_agent:m0_lock -> onchip_memory2_s1_translator:uav_lock
	wire   [31:0] onchip_memory2_s1_agent_m0_writedata;                                                           // onchip_memory2_s1_agent:m0_writedata -> onchip_memory2_s1_translator:uav_writedata
	wire          onchip_memory2_s1_agent_m0_write;                                                               // onchip_memory2_s1_agent:m0_write -> onchip_memory2_s1_translator:uav_write
	wire    [2:0] onchip_memory2_s1_agent_m0_burstcount;                                                          // onchip_memory2_s1_agent:m0_burstcount -> onchip_memory2_s1_translator:uav_burstcount
	wire          onchip_memory2_s1_agent_rf_source_valid;                                                        // onchip_memory2_s1_agent:rf_source_valid -> onchip_memory2_s1_agent_rsp_fifo:in_valid
	wire  [106:0] onchip_memory2_s1_agent_rf_source_data;                                                         // onchip_memory2_s1_agent:rf_source_data -> onchip_memory2_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_s1_agent_rf_source_ready;                                                        // onchip_memory2_s1_agent_rsp_fifo:in_ready -> onchip_memory2_s1_agent:rf_source_ready
	wire          onchip_memory2_s1_agent_rf_source_startofpacket;                                                // onchip_memory2_s1_agent:rf_source_startofpacket -> onchip_memory2_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_s1_agent_rf_source_endofpacket;                                                  // onchip_memory2_s1_agent:rf_source_endofpacket -> onchip_memory2_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_s1_agent_rsp_fifo_out_valid;                                                     // onchip_memory2_s1_agent_rsp_fifo:out_valid -> onchip_memory2_s1_agent:rf_sink_valid
	wire  [106:0] onchip_memory2_s1_agent_rsp_fifo_out_data;                                                      // onchip_memory2_s1_agent_rsp_fifo:out_data -> onchip_memory2_s1_agent:rf_sink_data
	wire          onchip_memory2_s1_agent_rsp_fifo_out_ready;                                                     // onchip_memory2_s1_agent:rf_sink_ready -> onchip_memory2_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_s1_agent_rsp_fifo_out_startofpacket;                                             // onchip_memory2_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_s1_agent_rsp_fifo_out_endofpacket;                                               // onchip_memory2_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                          // cmd_mux_006:src_valid -> onchip_memory2_s1_agent:cp_valid
	wire  [105:0] cmd_mux_006_src_data;                                                                           // cmd_mux_006:src_data -> onchip_memory2_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                          // onchip_memory2_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [17:0] cmd_mux_006_src_channel;                                                                        // cmd_mux_006:src_channel -> onchip_memory2_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                                  // cmd_mux_006:src_startofpacket -> onchip_memory2_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                    // cmd_mux_006:src_endofpacket -> onchip_memory2_s1_agent:cp_endofpacket
	wire   [31:0] ledr_s1_agent_m0_readdata;                                                                      // ledr_s1_translator:uav_readdata -> ledr_s1_agent:m0_readdata
	wire          ledr_s1_agent_m0_waitrequest;                                                                   // ledr_s1_translator:uav_waitrequest -> ledr_s1_agent:m0_waitrequest
	wire          ledr_s1_agent_m0_debugaccess;                                                                   // ledr_s1_agent:m0_debugaccess -> ledr_s1_translator:uav_debugaccess
	wire   [25:0] ledr_s1_agent_m0_address;                                                                       // ledr_s1_agent:m0_address -> ledr_s1_translator:uav_address
	wire    [3:0] ledr_s1_agent_m0_byteenable;                                                                    // ledr_s1_agent:m0_byteenable -> ledr_s1_translator:uav_byteenable
	wire          ledr_s1_agent_m0_read;                                                                          // ledr_s1_agent:m0_read -> ledr_s1_translator:uav_read
	wire          ledr_s1_agent_m0_readdatavalid;                                                                 // ledr_s1_translator:uav_readdatavalid -> ledr_s1_agent:m0_readdatavalid
	wire          ledr_s1_agent_m0_lock;                                                                          // ledr_s1_agent:m0_lock -> ledr_s1_translator:uav_lock
	wire   [31:0] ledr_s1_agent_m0_writedata;                                                                     // ledr_s1_agent:m0_writedata -> ledr_s1_translator:uav_writedata
	wire          ledr_s1_agent_m0_write;                                                                         // ledr_s1_agent:m0_write -> ledr_s1_translator:uav_write
	wire    [2:0] ledr_s1_agent_m0_burstcount;                                                                    // ledr_s1_agent:m0_burstcount -> ledr_s1_translator:uav_burstcount
	wire          ledr_s1_agent_rf_source_valid;                                                                  // ledr_s1_agent:rf_source_valid -> ledr_s1_agent_rsp_fifo:in_valid
	wire  [106:0] ledr_s1_agent_rf_source_data;                                                                   // ledr_s1_agent:rf_source_data -> ledr_s1_agent_rsp_fifo:in_data
	wire          ledr_s1_agent_rf_source_ready;                                                                  // ledr_s1_agent_rsp_fifo:in_ready -> ledr_s1_agent:rf_source_ready
	wire          ledr_s1_agent_rf_source_startofpacket;                                                          // ledr_s1_agent:rf_source_startofpacket -> ledr_s1_agent_rsp_fifo:in_startofpacket
	wire          ledr_s1_agent_rf_source_endofpacket;                                                            // ledr_s1_agent:rf_source_endofpacket -> ledr_s1_agent_rsp_fifo:in_endofpacket
	wire          ledr_s1_agent_rsp_fifo_out_valid;                                                               // ledr_s1_agent_rsp_fifo:out_valid -> ledr_s1_agent:rf_sink_valid
	wire  [106:0] ledr_s1_agent_rsp_fifo_out_data;                                                                // ledr_s1_agent_rsp_fifo:out_data -> ledr_s1_agent:rf_sink_data
	wire          ledr_s1_agent_rsp_fifo_out_ready;                                                               // ledr_s1_agent:rf_sink_ready -> ledr_s1_agent_rsp_fifo:out_ready
	wire          ledr_s1_agent_rsp_fifo_out_startofpacket;                                                       // ledr_s1_agent_rsp_fifo:out_startofpacket -> ledr_s1_agent:rf_sink_startofpacket
	wire          ledr_s1_agent_rsp_fifo_out_endofpacket;                                                         // ledr_s1_agent_rsp_fifo:out_endofpacket -> ledr_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                          // cmd_mux_007:src_valid -> ledr_s1_agent:cp_valid
	wire  [105:0] cmd_mux_007_src_data;                                                                           // cmd_mux_007:src_data -> ledr_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                          // ledr_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [17:0] cmd_mux_007_src_channel;                                                                        // cmd_mux_007:src_channel -> ledr_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                                  // cmd_mux_007:src_startofpacket -> ledr_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                    // cmd_mux_007:src_endofpacket -> ledr_s1_agent:cp_endofpacket
	wire   [31:0] ledg_s1_agent_m0_readdata;                                                                      // ledg_s1_translator:uav_readdata -> ledg_s1_agent:m0_readdata
	wire          ledg_s1_agent_m0_waitrequest;                                                                   // ledg_s1_translator:uav_waitrequest -> ledg_s1_agent:m0_waitrequest
	wire          ledg_s1_agent_m0_debugaccess;                                                                   // ledg_s1_agent:m0_debugaccess -> ledg_s1_translator:uav_debugaccess
	wire   [25:0] ledg_s1_agent_m0_address;                                                                       // ledg_s1_agent:m0_address -> ledg_s1_translator:uav_address
	wire    [3:0] ledg_s1_agent_m0_byteenable;                                                                    // ledg_s1_agent:m0_byteenable -> ledg_s1_translator:uav_byteenable
	wire          ledg_s1_agent_m0_read;                                                                          // ledg_s1_agent:m0_read -> ledg_s1_translator:uav_read
	wire          ledg_s1_agent_m0_readdatavalid;                                                                 // ledg_s1_translator:uav_readdatavalid -> ledg_s1_agent:m0_readdatavalid
	wire          ledg_s1_agent_m0_lock;                                                                          // ledg_s1_agent:m0_lock -> ledg_s1_translator:uav_lock
	wire   [31:0] ledg_s1_agent_m0_writedata;                                                                     // ledg_s1_agent:m0_writedata -> ledg_s1_translator:uav_writedata
	wire          ledg_s1_agent_m0_write;                                                                         // ledg_s1_agent:m0_write -> ledg_s1_translator:uav_write
	wire    [2:0] ledg_s1_agent_m0_burstcount;                                                                    // ledg_s1_agent:m0_burstcount -> ledg_s1_translator:uav_burstcount
	wire          ledg_s1_agent_rf_source_valid;                                                                  // ledg_s1_agent:rf_source_valid -> ledg_s1_agent_rsp_fifo:in_valid
	wire  [106:0] ledg_s1_agent_rf_source_data;                                                                   // ledg_s1_agent:rf_source_data -> ledg_s1_agent_rsp_fifo:in_data
	wire          ledg_s1_agent_rf_source_ready;                                                                  // ledg_s1_agent_rsp_fifo:in_ready -> ledg_s1_agent:rf_source_ready
	wire          ledg_s1_agent_rf_source_startofpacket;                                                          // ledg_s1_agent:rf_source_startofpacket -> ledg_s1_agent_rsp_fifo:in_startofpacket
	wire          ledg_s1_agent_rf_source_endofpacket;                                                            // ledg_s1_agent:rf_source_endofpacket -> ledg_s1_agent_rsp_fifo:in_endofpacket
	wire          ledg_s1_agent_rsp_fifo_out_valid;                                                               // ledg_s1_agent_rsp_fifo:out_valid -> ledg_s1_agent:rf_sink_valid
	wire  [106:0] ledg_s1_agent_rsp_fifo_out_data;                                                                // ledg_s1_agent_rsp_fifo:out_data -> ledg_s1_agent:rf_sink_data
	wire          ledg_s1_agent_rsp_fifo_out_ready;                                                               // ledg_s1_agent:rf_sink_ready -> ledg_s1_agent_rsp_fifo:out_ready
	wire          ledg_s1_agent_rsp_fifo_out_startofpacket;                                                       // ledg_s1_agent_rsp_fifo:out_startofpacket -> ledg_s1_agent:rf_sink_startofpacket
	wire          ledg_s1_agent_rsp_fifo_out_endofpacket;                                                         // ledg_s1_agent_rsp_fifo:out_endofpacket -> ledg_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                          // cmd_mux_008:src_valid -> ledg_s1_agent:cp_valid
	wire  [105:0] cmd_mux_008_src_data;                                                                           // cmd_mux_008:src_data -> ledg_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                          // ledg_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [17:0] cmd_mux_008_src_channel;                                                                        // cmd_mux_008:src_channel -> ledg_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                                  // cmd_mux_008:src_startofpacket -> ledg_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                    // cmd_mux_008:src_endofpacket -> ledg_s1_agent:cp_endofpacket
	wire   [31:0] sw_s1_agent_m0_readdata;                                                                        // sw_s1_translator:uav_readdata -> sw_s1_agent:m0_readdata
	wire          sw_s1_agent_m0_waitrequest;                                                                     // sw_s1_translator:uav_waitrequest -> sw_s1_agent:m0_waitrequest
	wire          sw_s1_agent_m0_debugaccess;                                                                     // sw_s1_agent:m0_debugaccess -> sw_s1_translator:uav_debugaccess
	wire   [25:0] sw_s1_agent_m0_address;                                                                         // sw_s1_agent:m0_address -> sw_s1_translator:uav_address
	wire    [3:0] sw_s1_agent_m0_byteenable;                                                                      // sw_s1_agent:m0_byteenable -> sw_s1_translator:uav_byteenable
	wire          sw_s1_agent_m0_read;                                                                            // sw_s1_agent:m0_read -> sw_s1_translator:uav_read
	wire          sw_s1_agent_m0_readdatavalid;                                                                   // sw_s1_translator:uav_readdatavalid -> sw_s1_agent:m0_readdatavalid
	wire          sw_s1_agent_m0_lock;                                                                            // sw_s1_agent:m0_lock -> sw_s1_translator:uav_lock
	wire   [31:0] sw_s1_agent_m0_writedata;                                                                       // sw_s1_agent:m0_writedata -> sw_s1_translator:uav_writedata
	wire          sw_s1_agent_m0_write;                                                                           // sw_s1_agent:m0_write -> sw_s1_translator:uav_write
	wire    [2:0] sw_s1_agent_m0_burstcount;                                                                      // sw_s1_agent:m0_burstcount -> sw_s1_translator:uav_burstcount
	wire          sw_s1_agent_rf_source_valid;                                                                    // sw_s1_agent:rf_source_valid -> sw_s1_agent_rsp_fifo:in_valid
	wire  [106:0] sw_s1_agent_rf_source_data;                                                                     // sw_s1_agent:rf_source_data -> sw_s1_agent_rsp_fifo:in_data
	wire          sw_s1_agent_rf_source_ready;                                                                    // sw_s1_agent_rsp_fifo:in_ready -> sw_s1_agent:rf_source_ready
	wire          sw_s1_agent_rf_source_startofpacket;                                                            // sw_s1_agent:rf_source_startofpacket -> sw_s1_agent_rsp_fifo:in_startofpacket
	wire          sw_s1_agent_rf_source_endofpacket;                                                              // sw_s1_agent:rf_source_endofpacket -> sw_s1_agent_rsp_fifo:in_endofpacket
	wire          sw_s1_agent_rsp_fifo_out_valid;                                                                 // sw_s1_agent_rsp_fifo:out_valid -> sw_s1_agent:rf_sink_valid
	wire  [106:0] sw_s1_agent_rsp_fifo_out_data;                                                                  // sw_s1_agent_rsp_fifo:out_data -> sw_s1_agent:rf_sink_data
	wire          sw_s1_agent_rsp_fifo_out_ready;                                                                 // sw_s1_agent:rf_sink_ready -> sw_s1_agent_rsp_fifo:out_ready
	wire          sw_s1_agent_rsp_fifo_out_startofpacket;                                                         // sw_s1_agent_rsp_fifo:out_startofpacket -> sw_s1_agent:rf_sink_startofpacket
	wire          sw_s1_agent_rsp_fifo_out_endofpacket;                                                           // sw_s1_agent_rsp_fifo:out_endofpacket -> sw_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                                          // cmd_mux_009:src_valid -> sw_s1_agent:cp_valid
	wire  [105:0] cmd_mux_009_src_data;                                                                           // cmd_mux_009:src_data -> sw_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                          // sw_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [17:0] cmd_mux_009_src_channel;                                                                        // cmd_mux_009:src_channel -> sw_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                                  // cmd_mux_009:src_startofpacket -> sw_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                    // cmd_mux_009:src_endofpacket -> sw_s1_agent:cp_endofpacket
	wire   [31:0] key_s1_agent_m0_readdata;                                                                       // key_s1_translator:uav_readdata -> key_s1_agent:m0_readdata
	wire          key_s1_agent_m0_waitrequest;                                                                    // key_s1_translator:uav_waitrequest -> key_s1_agent:m0_waitrequest
	wire          key_s1_agent_m0_debugaccess;                                                                    // key_s1_agent:m0_debugaccess -> key_s1_translator:uav_debugaccess
	wire   [25:0] key_s1_agent_m0_address;                                                                        // key_s1_agent:m0_address -> key_s1_translator:uav_address
	wire    [3:0] key_s1_agent_m0_byteenable;                                                                     // key_s1_agent:m0_byteenable -> key_s1_translator:uav_byteenable
	wire          key_s1_agent_m0_read;                                                                           // key_s1_agent:m0_read -> key_s1_translator:uav_read
	wire          key_s1_agent_m0_readdatavalid;                                                                  // key_s1_translator:uav_readdatavalid -> key_s1_agent:m0_readdatavalid
	wire          key_s1_agent_m0_lock;                                                                           // key_s1_agent:m0_lock -> key_s1_translator:uav_lock
	wire   [31:0] key_s1_agent_m0_writedata;                                                                      // key_s1_agent:m0_writedata -> key_s1_translator:uav_writedata
	wire          key_s1_agent_m0_write;                                                                          // key_s1_agent:m0_write -> key_s1_translator:uav_write
	wire    [2:0] key_s1_agent_m0_burstcount;                                                                     // key_s1_agent:m0_burstcount -> key_s1_translator:uav_burstcount
	wire          key_s1_agent_rf_source_valid;                                                                   // key_s1_agent:rf_source_valid -> key_s1_agent_rsp_fifo:in_valid
	wire  [106:0] key_s1_agent_rf_source_data;                                                                    // key_s1_agent:rf_source_data -> key_s1_agent_rsp_fifo:in_data
	wire          key_s1_agent_rf_source_ready;                                                                   // key_s1_agent_rsp_fifo:in_ready -> key_s1_agent:rf_source_ready
	wire          key_s1_agent_rf_source_startofpacket;                                                           // key_s1_agent:rf_source_startofpacket -> key_s1_agent_rsp_fifo:in_startofpacket
	wire          key_s1_agent_rf_source_endofpacket;                                                             // key_s1_agent:rf_source_endofpacket -> key_s1_agent_rsp_fifo:in_endofpacket
	wire          key_s1_agent_rsp_fifo_out_valid;                                                                // key_s1_agent_rsp_fifo:out_valid -> key_s1_agent:rf_sink_valid
	wire  [106:0] key_s1_agent_rsp_fifo_out_data;                                                                 // key_s1_agent_rsp_fifo:out_data -> key_s1_agent:rf_sink_data
	wire          key_s1_agent_rsp_fifo_out_ready;                                                                // key_s1_agent:rf_sink_ready -> key_s1_agent_rsp_fifo:out_ready
	wire          key_s1_agent_rsp_fifo_out_startofpacket;                                                        // key_s1_agent_rsp_fifo:out_startofpacket -> key_s1_agent:rf_sink_startofpacket
	wire          key_s1_agent_rsp_fifo_out_endofpacket;                                                          // key_s1_agent_rsp_fifo:out_endofpacket -> key_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                          // cmd_mux_010:src_valid -> key_s1_agent:cp_valid
	wire  [105:0] cmd_mux_010_src_data;                                                                           // cmd_mux_010:src_data -> key_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                          // key_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [17:0] cmd_mux_010_src_channel;                                                                        // cmd_mux_010:src_channel -> key_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                                  // cmd_mux_010:src_startofpacket -> key_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                    // cmd_mux_010:src_endofpacket -> key_s1_agent:cp_endofpacket
	wire   [31:0] floatdata_output_s1_agent_m0_readdata;                                                          // floatdata_output_s1_translator:uav_readdata -> floatdata_output_s1_agent:m0_readdata
	wire          floatdata_output_s1_agent_m0_waitrequest;                                                       // floatdata_output_s1_translator:uav_waitrequest -> floatdata_output_s1_agent:m0_waitrequest
	wire          floatdata_output_s1_agent_m0_debugaccess;                                                       // floatdata_output_s1_agent:m0_debugaccess -> floatdata_output_s1_translator:uav_debugaccess
	wire   [25:0] floatdata_output_s1_agent_m0_address;                                                           // floatdata_output_s1_agent:m0_address -> floatdata_output_s1_translator:uav_address
	wire    [3:0] floatdata_output_s1_agent_m0_byteenable;                                                        // floatdata_output_s1_agent:m0_byteenable -> floatdata_output_s1_translator:uav_byteenable
	wire          floatdata_output_s1_agent_m0_read;                                                              // floatdata_output_s1_agent:m0_read -> floatdata_output_s1_translator:uav_read
	wire          floatdata_output_s1_agent_m0_readdatavalid;                                                     // floatdata_output_s1_translator:uav_readdatavalid -> floatdata_output_s1_agent:m0_readdatavalid
	wire          floatdata_output_s1_agent_m0_lock;                                                              // floatdata_output_s1_agent:m0_lock -> floatdata_output_s1_translator:uav_lock
	wire   [31:0] floatdata_output_s1_agent_m0_writedata;                                                         // floatdata_output_s1_agent:m0_writedata -> floatdata_output_s1_translator:uav_writedata
	wire          floatdata_output_s1_agent_m0_write;                                                             // floatdata_output_s1_agent:m0_write -> floatdata_output_s1_translator:uav_write
	wire    [2:0] floatdata_output_s1_agent_m0_burstcount;                                                        // floatdata_output_s1_agent:m0_burstcount -> floatdata_output_s1_translator:uav_burstcount
	wire          floatdata_output_s1_agent_rf_source_valid;                                                      // floatdata_output_s1_agent:rf_source_valid -> floatdata_output_s1_agent_rsp_fifo:in_valid
	wire  [106:0] floatdata_output_s1_agent_rf_source_data;                                                       // floatdata_output_s1_agent:rf_source_data -> floatdata_output_s1_agent_rsp_fifo:in_data
	wire          floatdata_output_s1_agent_rf_source_ready;                                                      // floatdata_output_s1_agent_rsp_fifo:in_ready -> floatdata_output_s1_agent:rf_source_ready
	wire          floatdata_output_s1_agent_rf_source_startofpacket;                                              // floatdata_output_s1_agent:rf_source_startofpacket -> floatdata_output_s1_agent_rsp_fifo:in_startofpacket
	wire          floatdata_output_s1_agent_rf_source_endofpacket;                                                // floatdata_output_s1_agent:rf_source_endofpacket -> floatdata_output_s1_agent_rsp_fifo:in_endofpacket
	wire          floatdata_output_s1_agent_rsp_fifo_out_valid;                                                   // floatdata_output_s1_agent_rsp_fifo:out_valid -> floatdata_output_s1_agent:rf_sink_valid
	wire  [106:0] floatdata_output_s1_agent_rsp_fifo_out_data;                                                    // floatdata_output_s1_agent_rsp_fifo:out_data -> floatdata_output_s1_agent:rf_sink_data
	wire          floatdata_output_s1_agent_rsp_fifo_out_ready;                                                   // floatdata_output_s1_agent:rf_sink_ready -> floatdata_output_s1_agent_rsp_fifo:out_ready
	wire          floatdata_output_s1_agent_rsp_fifo_out_startofpacket;                                           // floatdata_output_s1_agent_rsp_fifo:out_startofpacket -> floatdata_output_s1_agent:rf_sink_startofpacket
	wire          floatdata_output_s1_agent_rsp_fifo_out_endofpacket;                                             // floatdata_output_s1_agent_rsp_fifo:out_endofpacket -> floatdata_output_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                                          // cmd_mux_011:src_valid -> floatdata_output_s1_agent:cp_valid
	wire  [105:0] cmd_mux_011_src_data;                                                                           // cmd_mux_011:src_data -> floatdata_output_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                          // floatdata_output_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [17:0] cmd_mux_011_src_channel;                                                                        // cmd_mux_011:src_channel -> floatdata_output_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                                  // cmd_mux_011:src_startofpacket -> floatdata_output_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                    // cmd_mux_011:src_endofpacket -> floatdata_output_s1_agent:cp_endofpacket
	wire   [31:0] sync_data_s1_agent_m0_readdata;                                                                 // sync_data_s1_translator:uav_readdata -> sync_data_s1_agent:m0_readdata
	wire          sync_data_s1_agent_m0_waitrequest;                                                              // sync_data_s1_translator:uav_waitrequest -> sync_data_s1_agent:m0_waitrequest
	wire          sync_data_s1_agent_m0_debugaccess;                                                              // sync_data_s1_agent:m0_debugaccess -> sync_data_s1_translator:uav_debugaccess
	wire   [25:0] sync_data_s1_agent_m0_address;                                                                  // sync_data_s1_agent:m0_address -> sync_data_s1_translator:uav_address
	wire    [3:0] sync_data_s1_agent_m0_byteenable;                                                               // sync_data_s1_agent:m0_byteenable -> sync_data_s1_translator:uav_byteenable
	wire          sync_data_s1_agent_m0_read;                                                                     // sync_data_s1_agent:m0_read -> sync_data_s1_translator:uav_read
	wire          sync_data_s1_agent_m0_readdatavalid;                                                            // sync_data_s1_translator:uav_readdatavalid -> sync_data_s1_agent:m0_readdatavalid
	wire          sync_data_s1_agent_m0_lock;                                                                     // sync_data_s1_agent:m0_lock -> sync_data_s1_translator:uav_lock
	wire   [31:0] sync_data_s1_agent_m0_writedata;                                                                // sync_data_s1_agent:m0_writedata -> sync_data_s1_translator:uav_writedata
	wire          sync_data_s1_agent_m0_write;                                                                    // sync_data_s1_agent:m0_write -> sync_data_s1_translator:uav_write
	wire    [2:0] sync_data_s1_agent_m0_burstcount;                                                               // sync_data_s1_agent:m0_burstcount -> sync_data_s1_translator:uav_burstcount
	wire          sync_data_s1_agent_rf_source_valid;                                                             // sync_data_s1_agent:rf_source_valid -> sync_data_s1_agent_rsp_fifo:in_valid
	wire  [106:0] sync_data_s1_agent_rf_source_data;                                                              // sync_data_s1_agent:rf_source_data -> sync_data_s1_agent_rsp_fifo:in_data
	wire          sync_data_s1_agent_rf_source_ready;                                                             // sync_data_s1_agent_rsp_fifo:in_ready -> sync_data_s1_agent:rf_source_ready
	wire          sync_data_s1_agent_rf_source_startofpacket;                                                     // sync_data_s1_agent:rf_source_startofpacket -> sync_data_s1_agent_rsp_fifo:in_startofpacket
	wire          sync_data_s1_agent_rf_source_endofpacket;                                                       // sync_data_s1_agent:rf_source_endofpacket -> sync_data_s1_agent_rsp_fifo:in_endofpacket
	wire          sync_data_s1_agent_rsp_fifo_out_valid;                                                          // sync_data_s1_agent_rsp_fifo:out_valid -> sync_data_s1_agent:rf_sink_valid
	wire  [106:0] sync_data_s1_agent_rsp_fifo_out_data;                                                           // sync_data_s1_agent_rsp_fifo:out_data -> sync_data_s1_agent:rf_sink_data
	wire          sync_data_s1_agent_rsp_fifo_out_ready;                                                          // sync_data_s1_agent:rf_sink_ready -> sync_data_s1_agent_rsp_fifo:out_ready
	wire          sync_data_s1_agent_rsp_fifo_out_startofpacket;                                                  // sync_data_s1_agent_rsp_fifo:out_startofpacket -> sync_data_s1_agent:rf_sink_startofpacket
	wire          sync_data_s1_agent_rsp_fifo_out_endofpacket;                                                    // sync_data_s1_agent_rsp_fifo:out_endofpacket -> sync_data_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                                          // cmd_mux_012:src_valid -> sync_data_s1_agent:cp_valid
	wire  [105:0] cmd_mux_012_src_data;                                                                           // cmd_mux_012:src_data -> sync_data_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                          // sync_data_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [17:0] cmd_mux_012_src_channel;                                                                        // cmd_mux_012:src_channel -> sync_data_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                                  // cmd_mux_012:src_startofpacket -> sync_data_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                                    // cmd_mux_012:src_endofpacket -> sync_data_s1_agent:cp_endofpacket
	wire   [31:0] pixel_index_s1_agent_m0_readdata;                                                               // pixel_index_s1_translator:uav_readdata -> pixel_index_s1_agent:m0_readdata
	wire          pixel_index_s1_agent_m0_waitrequest;                                                            // pixel_index_s1_translator:uav_waitrequest -> pixel_index_s1_agent:m0_waitrequest
	wire          pixel_index_s1_agent_m0_debugaccess;                                                            // pixel_index_s1_agent:m0_debugaccess -> pixel_index_s1_translator:uav_debugaccess
	wire   [25:0] pixel_index_s1_agent_m0_address;                                                                // pixel_index_s1_agent:m0_address -> pixel_index_s1_translator:uav_address
	wire    [3:0] pixel_index_s1_agent_m0_byteenable;                                                             // pixel_index_s1_agent:m0_byteenable -> pixel_index_s1_translator:uav_byteenable
	wire          pixel_index_s1_agent_m0_read;                                                                   // pixel_index_s1_agent:m0_read -> pixel_index_s1_translator:uav_read
	wire          pixel_index_s1_agent_m0_readdatavalid;                                                          // pixel_index_s1_translator:uav_readdatavalid -> pixel_index_s1_agent:m0_readdatavalid
	wire          pixel_index_s1_agent_m0_lock;                                                                   // pixel_index_s1_agent:m0_lock -> pixel_index_s1_translator:uav_lock
	wire   [31:0] pixel_index_s1_agent_m0_writedata;                                                              // pixel_index_s1_agent:m0_writedata -> pixel_index_s1_translator:uav_writedata
	wire          pixel_index_s1_agent_m0_write;                                                                  // pixel_index_s1_agent:m0_write -> pixel_index_s1_translator:uav_write
	wire    [2:0] pixel_index_s1_agent_m0_burstcount;                                                             // pixel_index_s1_agent:m0_burstcount -> pixel_index_s1_translator:uav_burstcount
	wire          pixel_index_s1_agent_rf_source_valid;                                                           // pixel_index_s1_agent:rf_source_valid -> pixel_index_s1_agent_rsp_fifo:in_valid
	wire  [106:0] pixel_index_s1_agent_rf_source_data;                                                            // pixel_index_s1_agent:rf_source_data -> pixel_index_s1_agent_rsp_fifo:in_data
	wire          pixel_index_s1_agent_rf_source_ready;                                                           // pixel_index_s1_agent_rsp_fifo:in_ready -> pixel_index_s1_agent:rf_source_ready
	wire          pixel_index_s1_agent_rf_source_startofpacket;                                                   // pixel_index_s1_agent:rf_source_startofpacket -> pixel_index_s1_agent_rsp_fifo:in_startofpacket
	wire          pixel_index_s1_agent_rf_source_endofpacket;                                                     // pixel_index_s1_agent:rf_source_endofpacket -> pixel_index_s1_agent_rsp_fifo:in_endofpacket
	wire          pixel_index_s1_agent_rsp_fifo_out_valid;                                                        // pixel_index_s1_agent_rsp_fifo:out_valid -> pixel_index_s1_agent:rf_sink_valid
	wire  [106:0] pixel_index_s1_agent_rsp_fifo_out_data;                                                         // pixel_index_s1_agent_rsp_fifo:out_data -> pixel_index_s1_agent:rf_sink_data
	wire          pixel_index_s1_agent_rsp_fifo_out_ready;                                                        // pixel_index_s1_agent:rf_sink_ready -> pixel_index_s1_agent_rsp_fifo:out_ready
	wire          pixel_index_s1_agent_rsp_fifo_out_startofpacket;                                                // pixel_index_s1_agent_rsp_fifo:out_startofpacket -> pixel_index_s1_agent:rf_sink_startofpacket
	wire          pixel_index_s1_agent_rsp_fifo_out_endofpacket;                                                  // pixel_index_s1_agent_rsp_fifo:out_endofpacket -> pixel_index_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                                          // cmd_mux_013:src_valid -> pixel_index_s1_agent:cp_valid
	wire  [105:0] cmd_mux_013_src_data;                                                                           // cmd_mux_013:src_data -> pixel_index_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                                          // pixel_index_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [17:0] cmd_mux_013_src_channel;                                                                        // cmd_mux_013:src_channel -> pixel_index_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                                  // cmd_mux_013:src_startofpacket -> pixel_index_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                                    // cmd_mux_013:src_endofpacket -> pixel_index_s1_agent:cp_endofpacket
	wire   [31:0] weight_index_s1_agent_m0_readdata;                                                              // weight_index_s1_translator:uav_readdata -> weight_index_s1_agent:m0_readdata
	wire          weight_index_s1_agent_m0_waitrequest;                                                           // weight_index_s1_translator:uav_waitrequest -> weight_index_s1_agent:m0_waitrequest
	wire          weight_index_s1_agent_m0_debugaccess;                                                           // weight_index_s1_agent:m0_debugaccess -> weight_index_s1_translator:uav_debugaccess
	wire   [25:0] weight_index_s1_agent_m0_address;                                                               // weight_index_s1_agent:m0_address -> weight_index_s1_translator:uav_address
	wire    [3:0] weight_index_s1_agent_m0_byteenable;                                                            // weight_index_s1_agent:m0_byteenable -> weight_index_s1_translator:uav_byteenable
	wire          weight_index_s1_agent_m0_read;                                                                  // weight_index_s1_agent:m0_read -> weight_index_s1_translator:uav_read
	wire          weight_index_s1_agent_m0_readdatavalid;                                                         // weight_index_s1_translator:uav_readdatavalid -> weight_index_s1_agent:m0_readdatavalid
	wire          weight_index_s1_agent_m0_lock;                                                                  // weight_index_s1_agent:m0_lock -> weight_index_s1_translator:uav_lock
	wire   [31:0] weight_index_s1_agent_m0_writedata;                                                             // weight_index_s1_agent:m0_writedata -> weight_index_s1_translator:uav_writedata
	wire          weight_index_s1_agent_m0_write;                                                                 // weight_index_s1_agent:m0_write -> weight_index_s1_translator:uav_write
	wire    [2:0] weight_index_s1_agent_m0_burstcount;                                                            // weight_index_s1_agent:m0_burstcount -> weight_index_s1_translator:uav_burstcount
	wire          weight_index_s1_agent_rf_source_valid;                                                          // weight_index_s1_agent:rf_source_valid -> weight_index_s1_agent_rsp_fifo:in_valid
	wire  [106:0] weight_index_s1_agent_rf_source_data;                                                           // weight_index_s1_agent:rf_source_data -> weight_index_s1_agent_rsp_fifo:in_data
	wire          weight_index_s1_agent_rf_source_ready;                                                          // weight_index_s1_agent_rsp_fifo:in_ready -> weight_index_s1_agent:rf_source_ready
	wire          weight_index_s1_agent_rf_source_startofpacket;                                                  // weight_index_s1_agent:rf_source_startofpacket -> weight_index_s1_agent_rsp_fifo:in_startofpacket
	wire          weight_index_s1_agent_rf_source_endofpacket;                                                    // weight_index_s1_agent:rf_source_endofpacket -> weight_index_s1_agent_rsp_fifo:in_endofpacket
	wire          weight_index_s1_agent_rsp_fifo_out_valid;                                                       // weight_index_s1_agent_rsp_fifo:out_valid -> weight_index_s1_agent:rf_sink_valid
	wire  [106:0] weight_index_s1_agent_rsp_fifo_out_data;                                                        // weight_index_s1_agent_rsp_fifo:out_data -> weight_index_s1_agent:rf_sink_data
	wire          weight_index_s1_agent_rsp_fifo_out_ready;                                                       // weight_index_s1_agent:rf_sink_ready -> weight_index_s1_agent_rsp_fifo:out_ready
	wire          weight_index_s1_agent_rsp_fifo_out_startofpacket;                                               // weight_index_s1_agent_rsp_fifo:out_startofpacket -> weight_index_s1_agent:rf_sink_startofpacket
	wire          weight_index_s1_agent_rsp_fifo_out_endofpacket;                                                 // weight_index_s1_agent_rsp_fifo:out_endofpacket -> weight_index_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                                          // cmd_mux_014:src_valid -> weight_index_s1_agent:cp_valid
	wire  [105:0] cmd_mux_014_src_data;                                                                           // cmd_mux_014:src_data -> weight_index_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                                          // weight_index_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [17:0] cmd_mux_014_src_channel;                                                                        // cmd_mux_014:src_channel -> weight_index_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                                  // cmd_mux_014:src_startofpacket -> weight_index_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                                    // cmd_mux_014:src_endofpacket -> weight_index_s1_agent:cp_endofpacket
	wire   [31:0] results_input_s1_agent_m0_readdata;                                                             // results_input_s1_translator:uav_readdata -> results_input_s1_agent:m0_readdata
	wire          results_input_s1_agent_m0_waitrequest;                                                          // results_input_s1_translator:uav_waitrequest -> results_input_s1_agent:m0_waitrequest
	wire          results_input_s1_agent_m0_debugaccess;                                                          // results_input_s1_agent:m0_debugaccess -> results_input_s1_translator:uav_debugaccess
	wire   [25:0] results_input_s1_agent_m0_address;                                                              // results_input_s1_agent:m0_address -> results_input_s1_translator:uav_address
	wire    [3:0] results_input_s1_agent_m0_byteenable;                                                           // results_input_s1_agent:m0_byteenable -> results_input_s1_translator:uav_byteenable
	wire          results_input_s1_agent_m0_read;                                                                 // results_input_s1_agent:m0_read -> results_input_s1_translator:uav_read
	wire          results_input_s1_agent_m0_readdatavalid;                                                        // results_input_s1_translator:uav_readdatavalid -> results_input_s1_agent:m0_readdatavalid
	wire          results_input_s1_agent_m0_lock;                                                                 // results_input_s1_agent:m0_lock -> results_input_s1_translator:uav_lock
	wire   [31:0] results_input_s1_agent_m0_writedata;                                                            // results_input_s1_agent:m0_writedata -> results_input_s1_translator:uav_writedata
	wire          results_input_s1_agent_m0_write;                                                                // results_input_s1_agent:m0_write -> results_input_s1_translator:uav_write
	wire    [2:0] results_input_s1_agent_m0_burstcount;                                                           // results_input_s1_agent:m0_burstcount -> results_input_s1_translator:uav_burstcount
	wire          results_input_s1_agent_rf_source_valid;                                                         // results_input_s1_agent:rf_source_valid -> results_input_s1_agent_rsp_fifo:in_valid
	wire  [106:0] results_input_s1_agent_rf_source_data;                                                          // results_input_s1_agent:rf_source_data -> results_input_s1_agent_rsp_fifo:in_data
	wire          results_input_s1_agent_rf_source_ready;                                                         // results_input_s1_agent_rsp_fifo:in_ready -> results_input_s1_agent:rf_source_ready
	wire          results_input_s1_agent_rf_source_startofpacket;                                                 // results_input_s1_agent:rf_source_startofpacket -> results_input_s1_agent_rsp_fifo:in_startofpacket
	wire          results_input_s1_agent_rf_source_endofpacket;                                                   // results_input_s1_agent:rf_source_endofpacket -> results_input_s1_agent_rsp_fifo:in_endofpacket
	wire          results_input_s1_agent_rsp_fifo_out_valid;                                                      // results_input_s1_agent_rsp_fifo:out_valid -> results_input_s1_agent:rf_sink_valid
	wire  [106:0] results_input_s1_agent_rsp_fifo_out_data;                                                       // results_input_s1_agent_rsp_fifo:out_data -> results_input_s1_agent:rf_sink_data
	wire          results_input_s1_agent_rsp_fifo_out_ready;                                                      // results_input_s1_agent:rf_sink_ready -> results_input_s1_agent_rsp_fifo:out_ready
	wire          results_input_s1_agent_rsp_fifo_out_startofpacket;                                              // results_input_s1_agent_rsp_fifo:out_startofpacket -> results_input_s1_agent:rf_sink_startofpacket
	wire          results_input_s1_agent_rsp_fifo_out_endofpacket;                                                // results_input_s1_agent_rsp_fifo:out_endofpacket -> results_input_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                                          // cmd_mux_015:src_valid -> results_input_s1_agent:cp_valid
	wire  [105:0] cmd_mux_015_src_data;                                                                           // cmd_mux_015:src_data -> results_input_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                                          // results_input_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [17:0] cmd_mux_015_src_channel;                                                                        // cmd_mux_015:src_channel -> results_input_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                                  // cmd_mux_015:src_startofpacket -> results_input_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                                    // cmd_mux_015:src_endofpacket -> results_input_s1_agent:cp_endofpacket
	wire   [31:0] activations_index_s1_agent_m0_readdata;                                                         // activations_index_s1_translator:uav_readdata -> activations_index_s1_agent:m0_readdata
	wire          activations_index_s1_agent_m0_waitrequest;                                                      // activations_index_s1_translator:uav_waitrequest -> activations_index_s1_agent:m0_waitrequest
	wire          activations_index_s1_agent_m0_debugaccess;                                                      // activations_index_s1_agent:m0_debugaccess -> activations_index_s1_translator:uav_debugaccess
	wire   [25:0] activations_index_s1_agent_m0_address;                                                          // activations_index_s1_agent:m0_address -> activations_index_s1_translator:uav_address
	wire    [3:0] activations_index_s1_agent_m0_byteenable;                                                       // activations_index_s1_agent:m0_byteenable -> activations_index_s1_translator:uav_byteenable
	wire          activations_index_s1_agent_m0_read;                                                             // activations_index_s1_agent:m0_read -> activations_index_s1_translator:uav_read
	wire          activations_index_s1_agent_m0_readdatavalid;                                                    // activations_index_s1_translator:uav_readdatavalid -> activations_index_s1_agent:m0_readdatavalid
	wire          activations_index_s1_agent_m0_lock;                                                             // activations_index_s1_agent:m0_lock -> activations_index_s1_translator:uav_lock
	wire   [31:0] activations_index_s1_agent_m0_writedata;                                                        // activations_index_s1_agent:m0_writedata -> activations_index_s1_translator:uav_writedata
	wire          activations_index_s1_agent_m0_write;                                                            // activations_index_s1_agent:m0_write -> activations_index_s1_translator:uav_write
	wire    [2:0] activations_index_s1_agent_m0_burstcount;                                                       // activations_index_s1_agent:m0_burstcount -> activations_index_s1_translator:uav_burstcount
	wire          activations_index_s1_agent_rf_source_valid;                                                     // activations_index_s1_agent:rf_source_valid -> activations_index_s1_agent_rsp_fifo:in_valid
	wire  [106:0] activations_index_s1_agent_rf_source_data;                                                      // activations_index_s1_agent:rf_source_data -> activations_index_s1_agent_rsp_fifo:in_data
	wire          activations_index_s1_agent_rf_source_ready;                                                     // activations_index_s1_agent_rsp_fifo:in_ready -> activations_index_s1_agent:rf_source_ready
	wire          activations_index_s1_agent_rf_source_startofpacket;                                             // activations_index_s1_agent:rf_source_startofpacket -> activations_index_s1_agent_rsp_fifo:in_startofpacket
	wire          activations_index_s1_agent_rf_source_endofpacket;                                               // activations_index_s1_agent:rf_source_endofpacket -> activations_index_s1_agent_rsp_fifo:in_endofpacket
	wire          activations_index_s1_agent_rsp_fifo_out_valid;                                                  // activations_index_s1_agent_rsp_fifo:out_valid -> activations_index_s1_agent:rf_sink_valid
	wire  [106:0] activations_index_s1_agent_rsp_fifo_out_data;                                                   // activations_index_s1_agent_rsp_fifo:out_data -> activations_index_s1_agent:rf_sink_data
	wire          activations_index_s1_agent_rsp_fifo_out_ready;                                                  // activations_index_s1_agent:rf_sink_ready -> activations_index_s1_agent_rsp_fifo:out_ready
	wire          activations_index_s1_agent_rsp_fifo_out_startofpacket;                                          // activations_index_s1_agent_rsp_fifo:out_startofpacket -> activations_index_s1_agent:rf_sink_startofpacket
	wire          activations_index_s1_agent_rsp_fifo_out_endofpacket;                                            // activations_index_s1_agent_rsp_fifo:out_endofpacket -> activations_index_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                                          // cmd_mux_016:src_valid -> activations_index_s1_agent:cp_valid
	wire  [105:0] cmd_mux_016_src_data;                                                                           // cmd_mux_016:src_data -> activations_index_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                                          // activations_index_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [17:0] cmd_mux_016_src_channel;                                                                        // cmd_mux_016:src_channel -> activations_index_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                                  // cmd_mux_016:src_startofpacket -> activations_index_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                                    // cmd_mux_016:src_endofpacket -> activations_index_s1_agent:cp_endofpacket
	wire    [7:0] cfi_flash_uas_agent_m0_readdata;                                                                // cfi_flash_uas_translator:uav_readdata -> cfi_flash_uas_agent:m0_readdata
	wire          cfi_flash_uas_agent_m0_waitrequest;                                                             // cfi_flash_uas_translator:uav_waitrequest -> cfi_flash_uas_agent:m0_waitrequest
	wire          cfi_flash_uas_agent_m0_debugaccess;                                                             // cfi_flash_uas_agent:m0_debugaccess -> cfi_flash_uas_translator:uav_debugaccess
	wire   [25:0] cfi_flash_uas_agent_m0_address;                                                                 // cfi_flash_uas_agent:m0_address -> cfi_flash_uas_translator:uav_address
	wire    [0:0] cfi_flash_uas_agent_m0_byteenable;                                                              // cfi_flash_uas_agent:m0_byteenable -> cfi_flash_uas_translator:uav_byteenable
	wire          cfi_flash_uas_agent_m0_read;                                                                    // cfi_flash_uas_agent:m0_read -> cfi_flash_uas_translator:uav_read
	wire          cfi_flash_uas_agent_m0_readdatavalid;                                                           // cfi_flash_uas_translator:uav_readdatavalid -> cfi_flash_uas_agent:m0_readdatavalid
	wire          cfi_flash_uas_agent_m0_lock;                                                                    // cfi_flash_uas_agent:m0_lock -> cfi_flash_uas_translator:uav_lock
	wire    [7:0] cfi_flash_uas_agent_m0_writedata;                                                               // cfi_flash_uas_agent:m0_writedata -> cfi_flash_uas_translator:uav_writedata
	wire          cfi_flash_uas_agent_m0_write;                                                                   // cfi_flash_uas_agent:m0_write -> cfi_flash_uas_translator:uav_write
	wire    [0:0] cfi_flash_uas_agent_m0_burstcount;                                                              // cfi_flash_uas_agent:m0_burstcount -> cfi_flash_uas_translator:uav_burstcount
	wire          cfi_flash_uas_agent_rf_source_valid;                                                            // cfi_flash_uas_agent:rf_source_valid -> cfi_flash_uas_agent_rsp_fifo:in_valid
	wire   [79:0] cfi_flash_uas_agent_rf_source_data;                                                             // cfi_flash_uas_agent:rf_source_data -> cfi_flash_uas_agent_rsp_fifo:in_data
	wire          cfi_flash_uas_agent_rf_source_ready;                                                            // cfi_flash_uas_agent_rsp_fifo:in_ready -> cfi_flash_uas_agent:rf_source_ready
	wire          cfi_flash_uas_agent_rf_source_startofpacket;                                                    // cfi_flash_uas_agent:rf_source_startofpacket -> cfi_flash_uas_agent_rsp_fifo:in_startofpacket
	wire          cfi_flash_uas_agent_rf_source_endofpacket;                                                      // cfi_flash_uas_agent:rf_source_endofpacket -> cfi_flash_uas_agent_rsp_fifo:in_endofpacket
	wire          cfi_flash_uas_agent_rsp_fifo_out_valid;                                                         // cfi_flash_uas_agent_rsp_fifo:out_valid -> cfi_flash_uas_agent:rf_sink_valid
	wire   [79:0] cfi_flash_uas_agent_rsp_fifo_out_data;                                                          // cfi_flash_uas_agent_rsp_fifo:out_data -> cfi_flash_uas_agent:rf_sink_data
	wire          cfi_flash_uas_agent_rsp_fifo_out_ready;                                                         // cfi_flash_uas_agent:rf_sink_ready -> cfi_flash_uas_agent_rsp_fifo:out_ready
	wire          cfi_flash_uas_agent_rsp_fifo_out_startofpacket;                                                 // cfi_flash_uas_agent_rsp_fifo:out_startofpacket -> cfi_flash_uas_agent:rf_sink_startofpacket
	wire          cfi_flash_uas_agent_rsp_fifo_out_endofpacket;                                                   // cfi_flash_uas_agent_rsp_fifo:out_endofpacket -> cfi_flash_uas_agent:rf_sink_endofpacket
	wire          cfi_flash_uas_agent_rdata_fifo_src_valid;                                                       // cfi_flash_uas_agent:rdata_fifo_src_valid -> cfi_flash_uas_agent_rdata_fifo:in_valid
	wire    [9:0] cfi_flash_uas_agent_rdata_fifo_src_data;                                                        // cfi_flash_uas_agent:rdata_fifo_src_data -> cfi_flash_uas_agent_rdata_fifo:in_data
	wire          cfi_flash_uas_agent_rdata_fifo_src_ready;                                                       // cfi_flash_uas_agent_rdata_fifo:in_ready -> cfi_flash_uas_agent:rdata_fifo_src_ready
	wire          cpu_data_master_agent_cp_valid;                                                                 // cpu_data_master_agent:cp_valid -> router:sink_valid
	wire  [105:0] cpu_data_master_agent_cp_data;                                                                  // cpu_data_master_agent:cp_data -> router:sink_data
	wire          cpu_data_master_agent_cp_ready;                                                                 // router:sink_ready -> cpu_data_master_agent:cp_ready
	wire          cpu_data_master_agent_cp_startofpacket;                                                         // cpu_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cpu_data_master_agent_cp_endofpacket;                                                           // cpu_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          cpu_instruction_master_agent_cp_valid;                                                          // cpu_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [105:0] cpu_instruction_master_agent_cp_data;                                                           // cpu_instruction_master_agent:cp_data -> router_001:sink_data
	wire          cpu_instruction_master_agent_cp_ready;                                                          // router_001:sink_ready -> cpu_instruction_master_agent:cp_ready
	wire          cpu_instruction_master_agent_cp_startofpacket;                                                  // cpu_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_instruction_master_agent_cp_endofpacket;                                                    // cpu_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_valid;                      // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_valid -> router_002:sink_valid
	wire   [78:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_data;                       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_data -> router_002:sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_ready;                      // router_002:sink_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_ready
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_startofpacket;              // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_endofpacket;                // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_valid;                     // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_valid -> router_003:sink_valid
	wire  [105:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_data;                      // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_data -> router_003:sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_ready;                     // router_003:sink_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_ready
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_startofpacket;             // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_endofpacket;               // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                           // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [105:0] router_003_src_data;                                                                            // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                                           // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [17:0] router_003_src_channel;                                                                         // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                                   // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                     // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                                     // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_004:sink_valid
	wire  [105:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                                      // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_004:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                                     // router_004:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                             // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                               // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                           // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [105:0] router_004_src_data;                                                                            // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                                           // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [17:0] router_004_src_channel;                                                                         // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                                   // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                     // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          cpu_debug_mem_slave_agent_rp_valid;                                                             // cpu_debug_mem_slave_agent:rp_valid -> router_005:sink_valid
	wire  [105:0] cpu_debug_mem_slave_agent_rp_data;                                                              // cpu_debug_mem_slave_agent:rp_data -> router_005:sink_data
	wire          cpu_debug_mem_slave_agent_rp_ready;                                                             // router_005:sink_ready -> cpu_debug_mem_slave_agent:rp_ready
	wire          cpu_debug_mem_slave_agent_rp_startofpacket;                                                     // cpu_debug_mem_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          cpu_debug_mem_slave_agent_rp_endofpacket;                                                       // cpu_debug_mem_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                           // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [105:0] router_005_src_data;                                                                            // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                                           // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [17:0] router_005_src_channel;                                                                         // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                                   // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                     // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          altpll_pll_slave_agent_rp_valid;                                                                // altpll_pll_slave_agent:rp_valid -> router_006:sink_valid
	wire  [105:0] altpll_pll_slave_agent_rp_data;                                                                 // altpll_pll_slave_agent:rp_data -> router_006:sink_data
	wire          altpll_pll_slave_agent_rp_ready;                                                                // router_006:sink_ready -> altpll_pll_slave_agent:rp_ready
	wire          altpll_pll_slave_agent_rp_startofpacket;                                                        // altpll_pll_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          altpll_pll_slave_agent_rp_endofpacket;                                                          // altpll_pll_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                           // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [105:0] router_006_src_data;                                                                            // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                                           // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [17:0] router_006_src_channel;                                                                         // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                                   // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                     // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          clock_crossing_io_s0_agent_rp_valid;                                                            // clock_crossing_io_s0_agent:rp_valid -> router_007:sink_valid
	wire  [105:0] clock_crossing_io_s0_agent_rp_data;                                                             // clock_crossing_io_s0_agent:rp_data -> router_007:sink_data
	wire          clock_crossing_io_s0_agent_rp_ready;                                                            // router_007:sink_ready -> clock_crossing_io_s0_agent:rp_ready
	wire          clock_crossing_io_s0_agent_rp_startofpacket;                                                    // clock_crossing_io_s0_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          clock_crossing_io_s0_agent_rp_endofpacket;                                                      // clock_crossing_io_s0_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                           // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [105:0] router_007_src_data;                                                                            // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                                           // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [17:0] router_007_src_channel;                                                                         // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                                   // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                     // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          onchip_memory2_s1_agent_rp_valid;                                                               // onchip_memory2_s1_agent:rp_valid -> router_008:sink_valid
	wire  [105:0] onchip_memory2_s1_agent_rp_data;                                                                // onchip_memory2_s1_agent:rp_data -> router_008:sink_data
	wire          onchip_memory2_s1_agent_rp_ready;                                                               // router_008:sink_ready -> onchip_memory2_s1_agent:rp_ready
	wire          onchip_memory2_s1_agent_rp_startofpacket;                                                       // onchip_memory2_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          onchip_memory2_s1_agent_rp_endofpacket;                                                         // onchip_memory2_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                           // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [105:0] router_008_src_data;                                                                            // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                                           // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [17:0] router_008_src_channel;                                                                         // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                                   // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                     // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          ledr_s1_agent_rp_valid;                                                                         // ledr_s1_agent:rp_valid -> router_009:sink_valid
	wire  [105:0] ledr_s1_agent_rp_data;                                                                          // ledr_s1_agent:rp_data -> router_009:sink_data
	wire          ledr_s1_agent_rp_ready;                                                                         // router_009:sink_ready -> ledr_s1_agent:rp_ready
	wire          ledr_s1_agent_rp_startofpacket;                                                                 // ledr_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          ledr_s1_agent_rp_endofpacket;                                                                   // ledr_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                           // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [105:0] router_009_src_data;                                                                            // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                                           // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [17:0] router_009_src_channel;                                                                         // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                                   // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                     // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          ledg_s1_agent_rp_valid;                                                                         // ledg_s1_agent:rp_valid -> router_010:sink_valid
	wire  [105:0] ledg_s1_agent_rp_data;                                                                          // ledg_s1_agent:rp_data -> router_010:sink_data
	wire          ledg_s1_agent_rp_ready;                                                                         // router_010:sink_ready -> ledg_s1_agent:rp_ready
	wire          ledg_s1_agent_rp_startofpacket;                                                                 // ledg_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          ledg_s1_agent_rp_endofpacket;                                                                   // ledg_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                           // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [105:0] router_010_src_data;                                                                            // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                                           // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [17:0] router_010_src_channel;                                                                         // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                                   // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                     // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          sw_s1_agent_rp_valid;                                                                           // sw_s1_agent:rp_valid -> router_011:sink_valid
	wire  [105:0] sw_s1_agent_rp_data;                                                                            // sw_s1_agent:rp_data -> router_011:sink_data
	wire          sw_s1_agent_rp_ready;                                                                           // router_011:sink_ready -> sw_s1_agent:rp_ready
	wire          sw_s1_agent_rp_startofpacket;                                                                   // sw_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          sw_s1_agent_rp_endofpacket;                                                                     // sw_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                           // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [105:0] router_011_src_data;                                                                            // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                                           // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [17:0] router_011_src_channel;                                                                         // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                                   // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                     // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          key_s1_agent_rp_valid;                                                                          // key_s1_agent:rp_valid -> router_012:sink_valid
	wire  [105:0] key_s1_agent_rp_data;                                                                           // key_s1_agent:rp_data -> router_012:sink_data
	wire          key_s1_agent_rp_ready;                                                                          // router_012:sink_ready -> key_s1_agent:rp_ready
	wire          key_s1_agent_rp_startofpacket;                                                                  // key_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          key_s1_agent_rp_endofpacket;                                                                    // key_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                           // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [105:0] router_012_src_data;                                                                            // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                                           // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [17:0] router_012_src_channel;                                                                         // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                                   // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                     // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          floatdata_output_s1_agent_rp_valid;                                                             // floatdata_output_s1_agent:rp_valid -> router_013:sink_valid
	wire  [105:0] floatdata_output_s1_agent_rp_data;                                                              // floatdata_output_s1_agent:rp_data -> router_013:sink_data
	wire          floatdata_output_s1_agent_rp_ready;                                                             // router_013:sink_ready -> floatdata_output_s1_agent:rp_ready
	wire          floatdata_output_s1_agent_rp_startofpacket;                                                     // floatdata_output_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          floatdata_output_s1_agent_rp_endofpacket;                                                       // floatdata_output_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                           // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [105:0] router_013_src_data;                                                                            // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                                           // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [17:0] router_013_src_channel;                                                                         // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                                                   // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                     // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          sync_data_s1_agent_rp_valid;                                                                    // sync_data_s1_agent:rp_valid -> router_014:sink_valid
	wire  [105:0] sync_data_s1_agent_rp_data;                                                                     // sync_data_s1_agent:rp_data -> router_014:sink_data
	wire          sync_data_s1_agent_rp_ready;                                                                    // router_014:sink_ready -> sync_data_s1_agent:rp_ready
	wire          sync_data_s1_agent_rp_startofpacket;                                                            // sync_data_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          sync_data_s1_agent_rp_endofpacket;                                                              // sync_data_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                           // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [105:0] router_014_src_data;                                                                            // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                                           // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [17:0] router_014_src_channel;                                                                         // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                                                   // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                     // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          pixel_index_s1_agent_rp_valid;                                                                  // pixel_index_s1_agent:rp_valid -> router_015:sink_valid
	wire  [105:0] pixel_index_s1_agent_rp_data;                                                                   // pixel_index_s1_agent:rp_data -> router_015:sink_data
	wire          pixel_index_s1_agent_rp_ready;                                                                  // router_015:sink_ready -> pixel_index_s1_agent:rp_ready
	wire          pixel_index_s1_agent_rp_startofpacket;                                                          // pixel_index_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          pixel_index_s1_agent_rp_endofpacket;                                                            // pixel_index_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                           // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [105:0] router_015_src_data;                                                                            // router_015:src_data -> rsp_demux_013:sink_data
	wire          router_015_src_ready;                                                                           // rsp_demux_013:sink_ready -> router_015:src_ready
	wire   [17:0] router_015_src_channel;                                                                         // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_startofpacket;                                                                   // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                     // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          weight_index_s1_agent_rp_valid;                                                                 // weight_index_s1_agent:rp_valid -> router_016:sink_valid
	wire  [105:0] weight_index_s1_agent_rp_data;                                                                  // weight_index_s1_agent:rp_data -> router_016:sink_data
	wire          weight_index_s1_agent_rp_ready;                                                                 // router_016:sink_ready -> weight_index_s1_agent:rp_ready
	wire          weight_index_s1_agent_rp_startofpacket;                                                         // weight_index_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          weight_index_s1_agent_rp_endofpacket;                                                           // weight_index_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                           // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [105:0] router_016_src_data;                                                                            // router_016:src_data -> rsp_demux_014:sink_data
	wire          router_016_src_ready;                                                                           // rsp_demux_014:sink_ready -> router_016:src_ready
	wire   [17:0] router_016_src_channel;                                                                         // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_startofpacket;                                                                   // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                     // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          results_input_s1_agent_rp_valid;                                                                // results_input_s1_agent:rp_valid -> router_017:sink_valid
	wire  [105:0] results_input_s1_agent_rp_data;                                                                 // results_input_s1_agent:rp_data -> router_017:sink_data
	wire          results_input_s1_agent_rp_ready;                                                                // router_017:sink_ready -> results_input_s1_agent:rp_ready
	wire          results_input_s1_agent_rp_startofpacket;                                                        // results_input_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          results_input_s1_agent_rp_endofpacket;                                                          // results_input_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                           // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [105:0] router_017_src_data;                                                                            // router_017:src_data -> rsp_demux_015:sink_data
	wire          router_017_src_ready;                                                                           // rsp_demux_015:sink_ready -> router_017:src_ready
	wire   [17:0] router_017_src_channel;                                                                         // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_startofpacket;                                                                   // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                     // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          activations_index_s1_agent_rp_valid;                                                            // activations_index_s1_agent:rp_valid -> router_018:sink_valid
	wire  [105:0] activations_index_s1_agent_rp_data;                                                             // activations_index_s1_agent:rp_data -> router_018:sink_data
	wire          activations_index_s1_agent_rp_ready;                                                            // router_018:sink_ready -> activations_index_s1_agent:rp_ready
	wire          activations_index_s1_agent_rp_startofpacket;                                                    // activations_index_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          activations_index_s1_agent_rp_endofpacket;                                                      // activations_index_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                           // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [105:0] router_018_src_data;                                                                            // router_018:src_data -> rsp_demux_016:sink_data
	wire          router_018_src_ready;                                                                           // rsp_demux_016:sink_ready -> router_018:src_ready
	wire   [17:0] router_018_src_channel;                                                                         // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_startofpacket;                                                                   // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                     // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          cfi_flash_uas_agent_rp_valid;                                                                   // cfi_flash_uas_agent:rp_valid -> router_019:sink_valid
	wire   [78:0] cfi_flash_uas_agent_rp_data;                                                                    // cfi_flash_uas_agent:rp_data -> router_019:sink_data
	wire          cfi_flash_uas_agent_rp_ready;                                                                   // router_019:sink_ready -> cfi_flash_uas_agent:rp_ready
	wire          cfi_flash_uas_agent_rp_startofpacket;                                                           // cfi_flash_uas_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          cfi_flash_uas_agent_rp_endofpacket;                                                             // cfi_flash_uas_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_src_valid;                                                                               // router:src_valid -> cpu_data_master_limiter:cmd_sink_valid
	wire  [105:0] router_src_data;                                                                                // router:src_data -> cpu_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                               // cpu_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [17:0] router_src_channel;                                                                             // router:src_channel -> cpu_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                       // router:src_startofpacket -> cpu_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                         // router:src_endofpacket -> cpu_data_master_limiter:cmd_sink_endofpacket
	wire  [105:0] cpu_data_master_limiter_cmd_src_data;                                                           // cpu_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          cpu_data_master_limiter_cmd_src_ready;                                                          // cmd_demux:sink_ready -> cpu_data_master_limiter:cmd_src_ready
	wire   [17:0] cpu_data_master_limiter_cmd_src_channel;                                                        // cpu_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          cpu_data_master_limiter_cmd_src_startofpacket;                                                  // cpu_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          cpu_data_master_limiter_cmd_src_endofpacket;                                                    // cpu_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                              // rsp_mux:src_valid -> cpu_data_master_limiter:rsp_sink_valid
	wire  [105:0] rsp_mux_src_data;                                                                               // rsp_mux:src_data -> cpu_data_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                              // cpu_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [17:0] rsp_mux_src_channel;                                                                            // rsp_mux:src_channel -> cpu_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                                      // rsp_mux:src_startofpacket -> cpu_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                        // rsp_mux:src_endofpacket -> cpu_data_master_limiter:rsp_sink_endofpacket
	wire          cpu_data_master_limiter_rsp_src_valid;                                                          // cpu_data_master_limiter:rsp_src_valid -> cpu_data_master_agent:rp_valid
	wire  [105:0] cpu_data_master_limiter_rsp_src_data;                                                           // cpu_data_master_limiter:rsp_src_data -> cpu_data_master_agent:rp_data
	wire          cpu_data_master_limiter_rsp_src_ready;                                                          // cpu_data_master_agent:rp_ready -> cpu_data_master_limiter:rsp_src_ready
	wire   [17:0] cpu_data_master_limiter_rsp_src_channel;                                                        // cpu_data_master_limiter:rsp_src_channel -> cpu_data_master_agent:rp_channel
	wire          cpu_data_master_limiter_rsp_src_startofpacket;                                                  // cpu_data_master_limiter:rsp_src_startofpacket -> cpu_data_master_agent:rp_startofpacket
	wire          cpu_data_master_limiter_rsp_src_endofpacket;                                                    // cpu_data_master_limiter:rsp_src_endofpacket -> cpu_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                                           // router_001:src_valid -> cpu_instruction_master_limiter:cmd_sink_valid
	wire  [105:0] router_001_src_data;                                                                            // router_001:src_data -> cpu_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                           // cpu_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [17:0] router_001_src_channel;                                                                         // router_001:src_channel -> cpu_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                                   // router_001:src_startofpacket -> cpu_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                     // router_001:src_endofpacket -> cpu_instruction_master_limiter:cmd_sink_endofpacket
	wire  [105:0] cpu_instruction_master_limiter_cmd_src_data;                                                    // cpu_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          cpu_instruction_master_limiter_cmd_src_ready;                                                   // cmd_demux_001:sink_ready -> cpu_instruction_master_limiter:cmd_src_ready
	wire   [17:0] cpu_instruction_master_limiter_cmd_src_channel;                                                 // cpu_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          cpu_instruction_master_limiter_cmd_src_startofpacket;                                           // cpu_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          cpu_instruction_master_limiter_cmd_src_endofpacket;                                             // cpu_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                          // rsp_mux_001:src_valid -> cpu_instruction_master_limiter:rsp_sink_valid
	wire  [105:0] rsp_mux_001_src_data;                                                                           // rsp_mux_001:src_data -> cpu_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                          // cpu_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [17:0] rsp_mux_001_src_channel;                                                                        // rsp_mux_001:src_channel -> cpu_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                                  // rsp_mux_001:src_startofpacket -> cpu_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                    // rsp_mux_001:src_endofpacket -> cpu_instruction_master_limiter:rsp_sink_endofpacket
	wire          cpu_instruction_master_limiter_rsp_src_valid;                                                   // cpu_instruction_master_limiter:rsp_src_valid -> cpu_instruction_master_agent:rp_valid
	wire  [105:0] cpu_instruction_master_limiter_rsp_src_data;                                                    // cpu_instruction_master_limiter:rsp_src_data -> cpu_instruction_master_agent:rp_data
	wire          cpu_instruction_master_limiter_rsp_src_ready;                                                   // cpu_instruction_master_agent:rp_ready -> cpu_instruction_master_limiter:rsp_src_ready
	wire   [17:0] cpu_instruction_master_limiter_rsp_src_channel;                                                 // cpu_instruction_master_limiter:rsp_src_channel -> cpu_instruction_master_agent:rp_channel
	wire          cpu_instruction_master_limiter_rsp_src_startofpacket;                                           // cpu_instruction_master_limiter:rsp_src_startofpacket -> cpu_instruction_master_agent:rp_startofpacket
	wire          cpu_instruction_master_limiter_rsp_src_endofpacket;                                             // cpu_instruction_master_limiter:rsp_src_endofpacket -> cpu_instruction_master_agent:rp_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_valid;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_valid
	wire   [78:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_data;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_ready;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_ready
	wire   [17:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_channel;       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_channel -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_channel
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_startofpacket; // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_endofpacket;   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_endofpacket
	wire          cfi_flash_uas_burst_adapter_source0_valid;                                                      // cfi_flash_uas_burst_adapter:source0_valid -> cfi_flash_uas_agent:cp_valid
	wire   [78:0] cfi_flash_uas_burst_adapter_source0_data;                                                       // cfi_flash_uas_burst_adapter:source0_data -> cfi_flash_uas_agent:cp_data
	wire          cfi_flash_uas_burst_adapter_source0_ready;                                                      // cfi_flash_uas_agent:cp_ready -> cfi_flash_uas_burst_adapter:source0_ready
	wire   [17:0] cfi_flash_uas_burst_adapter_source0_channel;                                                    // cfi_flash_uas_burst_adapter:source0_channel -> cfi_flash_uas_agent:cp_channel
	wire          cfi_flash_uas_burst_adapter_source0_startofpacket;                                              // cfi_flash_uas_burst_adapter:source0_startofpacket -> cfi_flash_uas_agent:cp_startofpacket
	wire          cfi_flash_uas_burst_adapter_source0_endofpacket;                                                // cfi_flash_uas_burst_adapter:source0_endofpacket -> cfi_flash_uas_agent:cp_endofpacket
	wire          cmd_demux_src2_valid;                                                                           // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [105:0] cmd_demux_src2_data;                                                                            // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                           // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [17:0] cmd_demux_src2_channel;                                                                         // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                                   // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                     // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                           // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [105:0] cmd_demux_src3_data;                                                                            // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                           // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [17:0] cmd_demux_src3_channel;                                                                         // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                                   // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                     // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                           // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [105:0] cmd_demux_src5_data;                                                                            // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                           // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [17:0] cmd_demux_src5_channel;                                                                         // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                                   // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                                     // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                           // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [105:0] cmd_demux_src6_data;                                                                            // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                           // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [17:0] cmd_demux_src6_channel;                                                                         // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                                   // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                                     // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                           // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [105:0] cmd_demux_src7_data;                                                                            // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                           // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [17:0] cmd_demux_src7_channel;                                                                         // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                                   // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                                     // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                           // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [105:0] cmd_demux_src8_data;                                                                            // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                           // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [17:0] cmd_demux_src8_channel;                                                                         // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                                   // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                                     // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                           // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [105:0] cmd_demux_src9_data;                                                                            // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                                           // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [17:0] cmd_demux_src9_channel;                                                                         // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                                   // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                                     // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                                          // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [105:0] cmd_demux_src10_data;                                                                           // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                                          // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [17:0] cmd_demux_src10_channel;                                                                        // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                                  // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                                    // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                                          // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [105:0] cmd_demux_src11_data;                                                                           // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                                          // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [17:0] cmd_demux_src11_channel;                                                                        // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                                  // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                                    // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                                          // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [105:0] cmd_demux_src12_data;                                                                           // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                                          // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [17:0] cmd_demux_src12_channel;                                                                        // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                                  // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                                    // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                                          // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [105:0] cmd_demux_src13_data;                                                                           // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                                          // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [17:0] cmd_demux_src13_channel;                                                                        // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                                  // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                                    // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                                          // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [105:0] cmd_demux_src14_data;                                                                           // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                                          // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [17:0] cmd_demux_src14_channel;                                                                        // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                                  // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                                    // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                                          // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [105:0] cmd_demux_src15_data;                                                                           // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                                          // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [17:0] cmd_demux_src15_channel;                                                                        // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                                  // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                                    // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                                          // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [105:0] cmd_demux_src16_data;                                                                           // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                                          // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [17:0] cmd_demux_src16_channel;                                                                        // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                                  // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                                    // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                                          // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [105:0] cmd_demux_src17_data;                                                                           // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                                          // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [17:0] cmd_demux_src17_channel;                                                                        // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                                                  // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                                    // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                       // cmd_demux_001:src0_valid -> cmd_mux_003:sink1_valid
	wire  [105:0] cmd_demux_001_src0_data;                                                                        // cmd_demux_001:src0_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                       // cmd_mux_003:sink1_ready -> cmd_demux_001:src0_ready
	wire   [17:0] cmd_demux_001_src0_channel;                                                                     // cmd_demux_001:src0_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                               // cmd_demux_001:src0_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                 // cmd_demux_001:src0_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                       // cmd_demux_001:src1_valid -> cmd_mux_006:sink1_valid
	wire  [105:0] cmd_demux_001_src1_data;                                                                        // cmd_demux_001:src1_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src1_ready;                                                                       // cmd_mux_006:sink1_ready -> cmd_demux_001:src1_ready
	wire   [17:0] cmd_demux_001_src1_channel;                                                                     // cmd_demux_001:src1_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                               // cmd_demux_001:src1_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                                 // cmd_demux_001:src1_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                       // cmd_demux_001:src2_valid -> cmd_mux_017:sink1_valid
	wire  [105:0] cmd_demux_001_src2_data;                                                                        // cmd_demux_001:src2_data -> cmd_mux_017:sink1_data
	wire          cmd_demux_001_src2_ready;                                                                       // cmd_mux_017:sink1_ready -> cmd_demux_001:src2_ready
	wire   [17:0] cmd_demux_001_src2_channel;                                                                     // cmd_demux_001:src2_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                               // cmd_demux_001:src2_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                                 // cmd_demux_001:src2_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                       // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [105:0] rsp_demux_002_src0_data;                                                                        // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                       // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [17:0] rsp_demux_002_src0_channel;                                                                     // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                               // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                 // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                       // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [105:0] rsp_demux_003_src0_data;                                                                        // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                       // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [17:0] rsp_demux_003_src0_channel;                                                                     // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                               // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                 // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                       // rsp_demux_003:src1_valid -> rsp_mux_001:sink0_valid
	wire  [105:0] rsp_demux_003_src1_data;                                                                        // rsp_demux_003:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_003_src1_ready;                                                                       // rsp_mux_001:sink0_ready -> rsp_demux_003:src1_ready
	wire   [17:0] rsp_demux_003_src1_channel;                                                                     // rsp_demux_003:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_003_src1_startofpacket;                                                               // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                                 // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                       // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [105:0] rsp_demux_005_src0_data;                                                                        // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                       // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [17:0] rsp_demux_005_src0_channel;                                                                     // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                               // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                                 // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                       // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [105:0] rsp_demux_006_src0_data;                                                                        // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                       // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [17:0] rsp_demux_006_src0_channel;                                                                     // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                               // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                                 // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                                       // rsp_demux_006:src1_valid -> rsp_mux_001:sink1_valid
	wire  [105:0] rsp_demux_006_src1_data;                                                                        // rsp_demux_006:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_006_src1_ready;                                                                       // rsp_mux_001:sink1_ready -> rsp_demux_006:src1_ready
	wire   [17:0] rsp_demux_006_src1_channel;                                                                     // rsp_demux_006:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_006_src1_startofpacket;                                                               // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                                 // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                       // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [105:0] rsp_demux_007_src0_data;                                                                        // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                       // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [17:0] rsp_demux_007_src0_channel;                                                                     // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                               // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                                 // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                       // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [105:0] rsp_demux_008_src0_data;                                                                        // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                       // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [17:0] rsp_demux_008_src0_channel;                                                                     // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                               // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                                 // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                       // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [105:0] rsp_demux_009_src0_data;                                                                        // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                       // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [17:0] rsp_demux_009_src0_channel;                                                                     // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                               // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                                 // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                       // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [105:0] rsp_demux_010_src0_data;                                                                        // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                       // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [17:0] rsp_demux_010_src0_channel;                                                                     // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                               // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                                 // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                       // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [105:0] rsp_demux_011_src0_data;                                                                        // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                                       // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [17:0] rsp_demux_011_src0_channel;                                                                     // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                               // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                                 // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                       // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [105:0] rsp_demux_012_src0_data;                                                                        // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                                       // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [17:0] rsp_demux_012_src0_channel;                                                                     // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                               // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                                 // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                       // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [105:0] rsp_demux_013_src0_data;                                                                        // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                                       // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [17:0] rsp_demux_013_src0_channel;                                                                     // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                               // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                                 // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                       // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [105:0] rsp_demux_014_src0_data;                                                                        // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                                       // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [17:0] rsp_demux_014_src0_channel;                                                                     // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                               // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                                 // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                       // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [105:0] rsp_demux_015_src0_data;                                                                        // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                                       // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [17:0] rsp_demux_015_src0_channel;                                                                     // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                               // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                                 // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                                       // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [105:0] rsp_demux_016_src0_data;                                                                        // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                                       // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [17:0] rsp_demux_016_src0_channel;                                                                     // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                               // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                                 // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                                       // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [105:0] rsp_demux_017_src0_data;                                                                        // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                                       // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [17:0] rsp_demux_017_src0_channel;                                                                     // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                               // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                                 // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_017_src1_valid;                                                                       // rsp_demux_017:src1_valid -> rsp_mux_001:sink2_valid
	wire  [105:0] rsp_demux_017_src1_data;                                                                        // rsp_demux_017:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_017_src1_ready;                                                                       // rsp_mux_001:sink2_ready -> rsp_demux_017:src1_ready
	wire   [17:0] rsp_demux_017_src1_channel;                                                                     // rsp_demux_017:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_017_src1_startofpacket;                                                               // rsp_demux_017:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                                                                 // rsp_demux_017:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          router_002_src_valid;                                                                           // router_002:src_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_valid
	wire   [78:0] router_002_src_data;                                                                            // router_002:src_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                                           // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_ready -> router_002:src_ready
	wire   [17:0] router_002_src_channel;                                                                         // router_002:src_channel -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                                   // router_002:src_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                                     // router_002:src_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_valid;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [105:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_data;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_ready
	wire   [17:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_channel;       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_startofpacket; // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_endofpacket;   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_019_src_valid;                                                                           // router_019:src_valid -> cfi_flash_uas_rsp_width_adapter:in_valid
	wire   [78:0] router_019_src_data;                                                                            // router_019:src_data -> cfi_flash_uas_rsp_width_adapter:in_data
	wire          router_019_src_ready;                                                                           // cfi_flash_uas_rsp_width_adapter:in_ready -> router_019:src_ready
	wire   [17:0] router_019_src_channel;                                                                         // router_019:src_channel -> cfi_flash_uas_rsp_width_adapter:in_channel
	wire          router_019_src_startofpacket;                                                                   // router_019:src_startofpacket -> cfi_flash_uas_rsp_width_adapter:in_startofpacket
	wire          router_019_src_endofpacket;                                                                     // router_019:src_endofpacket -> cfi_flash_uas_rsp_width_adapter:in_endofpacket
	wire          cfi_flash_uas_rsp_width_adapter_src_valid;                                                      // cfi_flash_uas_rsp_width_adapter:out_valid -> rsp_demux_017:sink_valid
	wire  [105:0] cfi_flash_uas_rsp_width_adapter_src_data;                                                       // cfi_flash_uas_rsp_width_adapter:out_data -> rsp_demux_017:sink_data
	wire          cfi_flash_uas_rsp_width_adapter_src_ready;                                                      // rsp_demux_017:sink_ready -> cfi_flash_uas_rsp_width_adapter:out_ready
	wire   [17:0] cfi_flash_uas_rsp_width_adapter_src_channel;                                                    // cfi_flash_uas_rsp_width_adapter:out_channel -> rsp_demux_017:sink_channel
	wire          cfi_flash_uas_rsp_width_adapter_src_startofpacket;                                              // cfi_flash_uas_rsp_width_adapter:out_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          cfi_flash_uas_rsp_width_adapter_src_endofpacket;                                                // cfi_flash_uas_rsp_width_adapter:out_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          cmd_mux_src_valid;                                                                              // cmd_mux:src_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_valid
	wire  [105:0] cmd_mux_src_data;                                                                               // cmd_mux:src_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                                              // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [17:0] cmd_mux_src_channel;                                                                            // cmd_mux:src_channel -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                                      // cmd_mux:src_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                        // cmd_mux:src_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_valid;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_valid
	wire   [78:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_data;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_ready;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_ready
	wire   [17:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_channel;       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_channel -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_channel
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_startofpacket; // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_endofpacket;   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_017_src_valid;                                                                          // cmd_mux_017:src_valid -> cfi_flash_uas_cmd_width_adapter:in_valid
	wire  [105:0] cmd_mux_017_src_data;                                                                           // cmd_mux_017:src_data -> cfi_flash_uas_cmd_width_adapter:in_data
	wire          cmd_mux_017_src_ready;                                                                          // cfi_flash_uas_cmd_width_adapter:in_ready -> cmd_mux_017:src_ready
	wire   [17:0] cmd_mux_017_src_channel;                                                                        // cmd_mux_017:src_channel -> cfi_flash_uas_cmd_width_adapter:in_channel
	wire          cmd_mux_017_src_startofpacket;                                                                  // cmd_mux_017:src_startofpacket -> cfi_flash_uas_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                                    // cmd_mux_017:src_endofpacket -> cfi_flash_uas_cmd_width_adapter:in_endofpacket
	wire          cfi_flash_uas_cmd_width_adapter_src_valid;                                                      // cfi_flash_uas_cmd_width_adapter:out_valid -> cfi_flash_uas_burst_adapter:sink0_valid
	wire   [78:0] cfi_flash_uas_cmd_width_adapter_src_data;                                                       // cfi_flash_uas_cmd_width_adapter:out_data -> cfi_flash_uas_burst_adapter:sink0_data
	wire          cfi_flash_uas_cmd_width_adapter_src_ready;                                                      // cfi_flash_uas_burst_adapter:sink0_ready -> cfi_flash_uas_cmd_width_adapter:out_ready
	wire   [17:0] cfi_flash_uas_cmd_width_adapter_src_channel;                                                    // cfi_flash_uas_cmd_width_adapter:out_channel -> cfi_flash_uas_burst_adapter:sink0_channel
	wire          cfi_flash_uas_cmd_width_adapter_src_startofpacket;                                              // cfi_flash_uas_cmd_width_adapter:out_startofpacket -> cfi_flash_uas_burst_adapter:sink0_startofpacket
	wire          cfi_flash_uas_cmd_width_adapter_src_endofpacket;                                                // cfi_flash_uas_cmd_width_adapter:out_endofpacket -> cfi_flash_uas_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                                           // cmd_demux:src0_valid -> crosser:in_valid
	wire  [105:0] cmd_demux_src0_data;                                                                            // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                                           // crosser:in_ready -> cmd_demux:src0_ready
	wire   [17:0] cmd_demux_src0_channel;                                                                         // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                                                   // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                     // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                              // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [105:0] crosser_out_data;                                                                               // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                                              // cmd_mux:sink0_ready -> crosser:out_ready
	wire   [17:0] crosser_out_channel;                                                                            // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                                      // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                        // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                           // cmd_demux:src1_valid -> crosser_001:in_valid
	wire  [105:0] cmd_demux_src1_data;                                                                            // cmd_demux:src1_data -> crosser_001:in_data
	wire          cmd_demux_src1_ready;                                                                           // crosser_001:in_ready -> cmd_demux:src1_ready
	wire   [17:0] cmd_demux_src1_channel;                                                                         // cmd_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                                                   // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                     // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                          // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [105:0] crosser_001_out_data;                                                                           // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                                                          // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire   [17:0] crosser_001_out_channel;                                                                        // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                                                  // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                                    // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                           // cmd_demux:src4_valid -> crosser_002:in_valid
	wire  [105:0] cmd_demux_src4_data;                                                                            // cmd_demux:src4_data -> crosser_002:in_data
	wire          cmd_demux_src4_ready;                                                                           // crosser_002:in_ready -> cmd_demux:src4_ready
	wire   [17:0] cmd_demux_src4_channel;                                                                         // cmd_demux:src4_channel -> crosser_002:in_channel
	wire          cmd_demux_src4_startofpacket;                                                                   // cmd_demux:src4_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                     // cmd_demux:src4_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                          // crosser_002:out_valid -> cmd_mux_004:sink0_valid
	wire  [105:0] crosser_002_out_data;                                                                           // crosser_002:out_data -> cmd_mux_004:sink0_data
	wire          crosser_002_out_ready;                                                                          // cmd_mux_004:sink0_ready -> crosser_002:out_ready
	wire   [17:0] crosser_002_out_channel;                                                                        // crosser_002:out_channel -> cmd_mux_004:sink0_channel
	wire          crosser_002_out_startofpacket;                                                                  // crosser_002:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                                    // crosser_002:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                           // rsp_demux:src0_valid -> crosser_003:in_valid
	wire  [105:0] rsp_demux_src0_data;                                                                            // rsp_demux:src0_data -> crosser_003:in_data
	wire          rsp_demux_src0_ready;                                                                           // crosser_003:in_ready -> rsp_demux:src0_ready
	wire   [17:0] rsp_demux_src0_channel;                                                                         // rsp_demux:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_src0_startofpacket;                                                                   // rsp_demux:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                     // rsp_demux:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                          // crosser_003:out_valid -> rsp_mux:sink0_valid
	wire  [105:0] crosser_003_out_data;                                                                           // crosser_003:out_data -> rsp_mux:sink0_data
	wire          crosser_003_out_ready;                                                                          // rsp_mux:sink0_ready -> crosser_003:out_ready
	wire   [17:0] crosser_003_out_channel;                                                                        // crosser_003:out_channel -> rsp_mux:sink0_channel
	wire          crosser_003_out_startofpacket;                                                                  // crosser_003:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                                                    // crosser_003:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                       // rsp_demux_001:src0_valid -> crosser_004:in_valid
	wire  [105:0] rsp_demux_001_src0_data;                                                                        // rsp_demux_001:src0_data -> crosser_004:in_data
	wire          rsp_demux_001_src0_ready;                                                                       // crosser_004:in_ready -> rsp_demux_001:src0_ready
	wire   [17:0] rsp_demux_001_src0_channel;                                                                     // rsp_demux_001:src0_channel -> crosser_004:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                               // rsp_demux_001:src0_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                 // rsp_demux_001:src0_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                          // crosser_004:out_valid -> rsp_mux:sink1_valid
	wire  [105:0] crosser_004_out_data;                                                                           // crosser_004:out_data -> rsp_mux:sink1_data
	wire          crosser_004_out_ready;                                                                          // rsp_mux:sink1_ready -> crosser_004:out_ready
	wire   [17:0] crosser_004_out_channel;                                                                        // crosser_004:out_channel -> rsp_mux:sink1_channel
	wire          crosser_004_out_startofpacket;                                                                  // crosser_004:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_004_out_endofpacket;                                                                    // crosser_004:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                       // rsp_demux_004:src0_valid -> crosser_005:in_valid
	wire  [105:0] rsp_demux_004_src0_data;                                                                        // rsp_demux_004:src0_data -> crosser_005:in_data
	wire          rsp_demux_004_src0_ready;                                                                       // crosser_005:in_ready -> rsp_demux_004:src0_ready
	wire   [17:0] rsp_demux_004_src0_channel;                                                                     // rsp_demux_004:src0_channel -> crosser_005:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                               // rsp_demux_004:src0_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                 // rsp_demux_004:src0_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                          // crosser_005:out_valid -> rsp_mux:sink4_valid
	wire  [105:0] crosser_005_out_data;                                                                           // crosser_005:out_data -> rsp_mux:sink4_data
	wire          crosser_005_out_ready;                                                                          // rsp_mux:sink4_ready -> crosser_005:out_ready
	wire   [17:0] crosser_005_out_channel;                                                                        // crosser_005:out_channel -> rsp_mux:sink4_channel
	wire          crosser_005_out_startofpacket;                                                                  // crosser_005:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          crosser_005_out_endofpacket;                                                                    // crosser_005:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire   [17:0] cpu_data_master_limiter_cmd_valid_data;                                                         // cpu_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [17:0] cpu_instruction_master_limiter_cmd_valid_data;                                                  // cpu_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_valid;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire    [9:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_data;           // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter:in_0_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                                  // avalon_st_adapter:out_0_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_out_0_data;                                                                   // avalon_st_adapter:out_0_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                  // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                  // avalon_st_adapter:out_0_error -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_error
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_valid;         // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_data;          // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_ready;         // avalon_st_adapter_001:in_0_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                              // avalon_st_adapter_001:out_0_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                               // avalon_st_adapter_001:out_0_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                              // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                              // avalon_st_adapter_001:out_0_error -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                         // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                          // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_002:in_0_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                              // avalon_st_adapter_002:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                               // avalon_st_adapter_002:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                              // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                              // avalon_st_adapter_002:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_valid;                                                 // cpu_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] cpu_debug_mem_slave_agent_rdata_fifo_src_data;                                                  // cpu_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_003:in_0_ready -> cpu_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                              // avalon_st_adapter_003:out_0_valid -> cpu_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                               // avalon_st_adapter_003:out_0_data -> cpu_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                              // cpu_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                              // avalon_st_adapter_003:out_0_error -> cpu_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          altpll_pll_slave_agent_rdata_fifo_out_valid;                                                    // altpll_pll_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] altpll_pll_slave_agent_rdata_fifo_out_data;                                                     // altpll_pll_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          altpll_pll_slave_agent_rdata_fifo_out_ready;                                                    // avalon_st_adapter_004:in_0_ready -> altpll_pll_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                              // avalon_st_adapter_004:out_0_valid -> altpll_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                               // avalon_st_adapter_004:out_0_data -> altpll_pll_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                              // altpll_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                              // avalon_st_adapter_004:out_0_error -> altpll_pll_slave_agent:rdata_fifo_sink_error
	wire          clock_crossing_io_s0_agent_rdata_fifo_src_valid;                                                // clock_crossing_io_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] clock_crossing_io_s0_agent_rdata_fifo_src_data;                                                 // clock_crossing_io_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          clock_crossing_io_s0_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_005:in_0_ready -> clock_crossing_io_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                              // avalon_st_adapter_005:out_0_valid -> clock_crossing_io_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                               // avalon_st_adapter_005:out_0_data -> clock_crossing_io_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                              // clock_crossing_io_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                              // avalon_st_adapter_005:out_0_error -> clock_crossing_io_s0_agent:rdata_fifo_sink_error
	wire          onchip_memory2_s1_agent_rdata_fifo_src_valid;                                                   // onchip_memory2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] onchip_memory2_s1_agent_rdata_fifo_src_data;                                                    // onchip_memory2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          onchip_memory2_s1_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter_006:in_0_ready -> onchip_memory2_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                              // avalon_st_adapter_006:out_0_valid -> onchip_memory2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                               // avalon_st_adapter_006:out_0_data -> onchip_memory2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                              // onchip_memory2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                              // avalon_st_adapter_006:out_0_error -> onchip_memory2_s1_agent:rdata_fifo_sink_error
	wire          ledr_s1_agent_rdata_fifo_src_valid;                                                             // ledr_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] ledr_s1_agent_rdata_fifo_src_data;                                                              // ledr_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          ledr_s1_agent_rdata_fifo_src_ready;                                                             // avalon_st_adapter_007:in_0_ready -> ledr_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                              // avalon_st_adapter_007:out_0_valid -> ledr_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                               // avalon_st_adapter_007:out_0_data -> ledr_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                              // ledr_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                              // avalon_st_adapter_007:out_0_error -> ledr_s1_agent:rdata_fifo_sink_error
	wire          ledg_s1_agent_rdata_fifo_src_valid;                                                             // ledg_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] ledg_s1_agent_rdata_fifo_src_data;                                                              // ledg_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          ledg_s1_agent_rdata_fifo_src_ready;                                                             // avalon_st_adapter_008:in_0_ready -> ledg_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                              // avalon_st_adapter_008:out_0_valid -> ledg_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                               // avalon_st_adapter_008:out_0_data -> ledg_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                              // ledg_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                              // avalon_st_adapter_008:out_0_error -> ledg_s1_agent:rdata_fifo_sink_error
	wire          sw_s1_agent_rdata_fifo_src_valid;                                                               // sw_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] sw_s1_agent_rdata_fifo_src_data;                                                                // sw_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          sw_s1_agent_rdata_fifo_src_ready;                                                               // avalon_st_adapter_009:in_0_ready -> sw_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                              // avalon_st_adapter_009:out_0_valid -> sw_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                               // avalon_st_adapter_009:out_0_data -> sw_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                              // sw_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                              // avalon_st_adapter_009:out_0_error -> sw_s1_agent:rdata_fifo_sink_error
	wire          key_s1_agent_rdata_fifo_src_valid;                                                              // key_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] key_s1_agent_rdata_fifo_src_data;                                                               // key_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          key_s1_agent_rdata_fifo_src_ready;                                                              // avalon_st_adapter_010:in_0_ready -> key_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                              // avalon_st_adapter_010:out_0_valid -> key_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                               // avalon_st_adapter_010:out_0_data -> key_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                              // key_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                              // avalon_st_adapter_010:out_0_error -> key_s1_agent:rdata_fifo_sink_error
	wire          floatdata_output_s1_agent_rdata_fifo_src_valid;                                                 // floatdata_output_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] floatdata_output_s1_agent_rdata_fifo_src_data;                                                  // floatdata_output_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          floatdata_output_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_011:in_0_ready -> floatdata_output_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                              // avalon_st_adapter_011:out_0_valid -> floatdata_output_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                               // avalon_st_adapter_011:out_0_data -> floatdata_output_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                              // floatdata_output_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                              // avalon_st_adapter_011:out_0_error -> floatdata_output_s1_agent:rdata_fifo_sink_error
	wire          sync_data_s1_agent_rdata_fifo_src_valid;                                                        // sync_data_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] sync_data_s1_agent_rdata_fifo_src_data;                                                         // sync_data_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          sync_data_s1_agent_rdata_fifo_src_ready;                                                        // avalon_st_adapter_012:in_0_ready -> sync_data_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                              // avalon_st_adapter_012:out_0_valid -> sync_data_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                               // avalon_st_adapter_012:out_0_data -> sync_data_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                              // sync_data_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                              // avalon_st_adapter_012:out_0_error -> sync_data_s1_agent:rdata_fifo_sink_error
	wire          pixel_index_s1_agent_rdata_fifo_src_valid;                                                      // pixel_index_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] pixel_index_s1_agent_rdata_fifo_src_data;                                                       // pixel_index_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          pixel_index_s1_agent_rdata_fifo_src_ready;                                                      // avalon_st_adapter_013:in_0_ready -> pixel_index_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                              // avalon_st_adapter_013:out_0_valid -> pixel_index_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                               // avalon_st_adapter_013:out_0_data -> pixel_index_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                              // pixel_index_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                              // avalon_st_adapter_013:out_0_error -> pixel_index_s1_agent:rdata_fifo_sink_error
	wire          weight_index_s1_agent_rdata_fifo_src_valid;                                                     // weight_index_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] weight_index_s1_agent_rdata_fifo_src_data;                                                      // weight_index_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          weight_index_s1_agent_rdata_fifo_src_ready;                                                     // avalon_st_adapter_014:in_0_ready -> weight_index_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                              // avalon_st_adapter_014:out_0_valid -> weight_index_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                               // avalon_st_adapter_014:out_0_data -> weight_index_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                              // weight_index_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                              // avalon_st_adapter_014:out_0_error -> weight_index_s1_agent:rdata_fifo_sink_error
	wire          results_input_s1_agent_rdata_fifo_src_valid;                                                    // results_input_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] results_input_s1_agent_rdata_fifo_src_data;                                                     // results_input_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          results_input_s1_agent_rdata_fifo_src_ready;                                                    // avalon_st_adapter_015:in_0_ready -> results_input_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                              // avalon_st_adapter_015:out_0_valid -> results_input_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                               // avalon_st_adapter_015:out_0_data -> results_input_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                              // results_input_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                              // avalon_st_adapter_015:out_0_error -> results_input_s1_agent:rdata_fifo_sink_error
	wire          activations_index_s1_agent_rdata_fifo_src_valid;                                                // activations_index_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] activations_index_s1_agent_rdata_fifo_src_data;                                                 // activations_index_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          activations_index_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_016:in_0_ready -> activations_index_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                              // avalon_st_adapter_016:out_0_valid -> activations_index_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                               // avalon_st_adapter_016:out_0_data -> activations_index_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                              // activations_index_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                              // avalon_st_adapter_016:out_0_error -> activations_index_s1_agent:rdata_fifo_sink_error
	wire          cfi_flash_uas_agent_rdata_fifo_out_valid;                                                       // cfi_flash_uas_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire    [9:0] cfi_flash_uas_agent_rdata_fifo_out_data;                                                        // cfi_flash_uas_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          cfi_flash_uas_agent_rdata_fifo_out_ready;                                                       // avalon_st_adapter_017:in_0_ready -> cfi_flash_uas_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                              // avalon_st_adapter_017:out_0_valid -> cfi_flash_uas_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_017_out_0_data;                                                               // avalon_st_adapter_017:out_0_data -> cfi_flash_uas_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                              // cfi_flash_uas_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                              // avalon_st_adapter_017:out_0_error -> cfi_flash_uas_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_data_master_translator (
		.clk                    (altpll_c0_clk),                                                      //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_data_master_read),                                               //                          .read
		.av_readdata            (cpu_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (cpu_data_master_write),                                              //                          .write
		.av_writedata           (cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (26),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                    (altpll_c0_clk),                                                             //                       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (cpu_instruction_master_read),                                               //                          .read
		.av_readdata            (cpu_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator (
		.clk                    (video_pll_0_vga_clk_clk),                                                           //                      clk.clk
		.reset                  (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_read),          //                         .read
		.uav_write              (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (video_character_buffer_with_dma_0_avalon_char_buffer_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (video_character_buffer_with_dma_0_avalon_char_buffer_slave_write),                  //                         .write
		.av_read                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_read),                   //                         .read
		.av_readdata            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_readdata),               //                         .readdata
		.av_writedata           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_writedata),              //                         .writedata
		.av_byteenable          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                                                  //              (terminated)
		.av_burstcount          (),                                                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                                                              //              (terminated)
		.av_writebyteenable     (),                                                                                  //              (terminated)
		.av_lock                (),                                                                                  //              (terminated)
		.av_clken               (),                                                                                  //              (terminated)
		.uav_clken              (1'b0),                                                                              //              (terminated)
		.av_debugaccess         (),                                                                                  //              (terminated)
		.av_outputenable        (),                                                                                  //              (terminated)
		.uav_response           (),                                                                                  //              (terminated)
		.av_response            (2'b00),                                                                             //              (terminated)
		.uav_writeresponsevalid (),                                                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_character_buffer_with_dma_0_avalon_char_control_slave_translator (
		.clk                    (video_pll_0_vga_clk_clk),                                                            //                      clk.clk
		.reset                  (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                //                    reset.reset
		.uav_address            (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_read),          //                         .read
		.uav_write              (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (video_character_buffer_with_dma_0_avalon_char_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (video_character_buffer_with_dma_0_avalon_char_control_slave_write),                  //                         .write
		.av_read                (video_character_buffer_with_dma_0_avalon_char_control_slave_read),                   //                         .read
		.av_readdata            (video_character_buffer_with_dma_0_avalon_char_control_slave_readdata),               //                         .readdata
		.av_writedata           (video_character_buffer_with_dma_0_avalon_char_control_slave_writedata),              //                         .writedata
		.av_byteenable          (video_character_buffer_with_dma_0_avalon_char_control_slave_byteenable),             //                         .byteenable
		.av_chipselect          (video_character_buffer_with_dma_0_avalon_char_control_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                                                   //              (terminated)
		.av_burstcount          (),                                                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                                                               //              (terminated)
		.av_waitrequest         (1'b0),                                                                               //              (terminated)
		.av_writebyteenable     (),                                                                                   //              (terminated)
		.av_lock                (),                                                                                   //              (terminated)
		.av_clken               (),                                                                                   //              (terminated)
		.uav_clken              (1'b0),                                                                               //              (terminated)
		.av_debugaccess         (),                                                                                   //              (terminated)
		.av_outputenable        (),                                                                                   //              (terminated)
		.uav_response           (),                                                                                   //              (terminated)
		.av_response            (2'b00),                                                                              //              (terminated)
		.uav_writeresponsevalid (),                                                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (altpll_c0_clk),                                      //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_debug_mem_slave_translator (
		.clk                    (altpll_c0_clk),                              //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cpu_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_debug_mem_slave_write),                  //                         .write
		.av_read                (cpu_debug_mem_slave_read),                   //                         .read
		.av_readdata            (cpu_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (cpu_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (cpu_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (cpu_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) altpll_pll_slave_translator (
		.clk                    (clk_50_clk_clk),                                           //                      clk.clk
		.reset                  (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (altpll_pll_slave_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (altpll_pll_slave_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (altpll_pll_slave_agent_m0_read),                           //                         .read
		.uav_write              (altpll_pll_slave_agent_m0_write),                          //                         .write
		.uav_waitrequest        (altpll_pll_slave_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (altpll_pll_slave_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (altpll_pll_slave_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (altpll_pll_slave_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (altpll_pll_slave_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (altpll_pll_slave_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (altpll_pll_slave_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (altpll_pll_slave_address),                                 //      avalon_anti_slave_0.address
		.av_write               (altpll_pll_slave_write),                                   //                         .write
		.av_read                (altpll_pll_slave_read),                                    //                         .read
		.av_readdata            (altpll_pll_slave_readdata),                                //                         .readdata
		.av_writedata           (altpll_pll_slave_writedata),                               //                         .writedata
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_byteenable          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_chipselect          (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) clock_crossing_io_s0_translator (
		.clk                    (altpll_c0_clk),                               //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (clock_crossing_io_s0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (clock_crossing_io_s0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (clock_crossing_io_s0_agent_m0_read),          //                         .read
		.uav_write              (clock_crossing_io_s0_agent_m0_write),         //                         .write
		.uav_waitrequest        (clock_crossing_io_s0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (clock_crossing_io_s0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (clock_crossing_io_s0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (clock_crossing_io_s0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (clock_crossing_io_s0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (clock_crossing_io_s0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (clock_crossing_io_s0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (clock_crossing_io_s0_address),                //      avalon_anti_slave_0.address
		.av_write               (clock_crossing_io_s0_write),                  //                         .write
		.av_read                (clock_crossing_io_s0_read),                   //                         .read
		.av_readdata            (clock_crossing_io_s0_readdata),               //                         .readdata
		.av_writedata           (clock_crossing_io_s0_writedata),              //                         .writedata
		.av_burstcount          (clock_crossing_io_s0_burstcount),             //                         .burstcount
		.av_byteenable          (clock_crossing_io_s0_byteenable),             //                         .byteenable
		.av_readdatavalid       (clock_crossing_io_s0_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (clock_crossing_io_s0_waitrequest),            //                         .waitrequest
		.av_debugaccess         (clock_crossing_io_s0_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_s1_translator (
		.clk                    (altpll_c0_clk),                                     //                      clk.clk
		.reset                  (onchip_memory2_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (onchip_memory2_s1_agent_m0_read),                   //                         .read
		.uav_write              (onchip_memory2_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (onchip_memory2_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (onchip_memory2_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (onchip_memory2_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (onchip_memory2_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (onchip_memory2_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (onchip_memory2_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_s1_write),                           //                         .write
		.av_readdata            (onchip_memory2_s1_readdata),                        //                         .readdata
		.av_writedata           (onchip_memory2_s1_writedata),                       //                         .writedata
		.av_byteenable          (onchip_memory2_s1_byteenable),                      //                         .byteenable
		.av_chipselect          (onchip_memory2_s1_chipselect),                      //                         .chipselect
		.av_clken               (onchip_memory2_s1_clken),                           //                         .clken
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ledr_s1_translator (
		.clk                    (altpll_c0_clk),                                     //                      clk.clk
		.reset                  (onchip_memory2_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ledr_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (ledr_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (ledr_s1_agent_m0_read),                             //                         .read
		.uav_write              (ledr_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (ledr_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (ledr_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (ledr_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (ledr_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (ledr_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (ledr_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (ledr_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (ledr_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (ledr_s1_write),                                     //                         .write
		.av_readdata            (ledr_s1_readdata),                                  //                         .readdata
		.av_writedata           (ledr_s1_writedata),                                 //                         .writedata
		.av_chipselect          (ledr_s1_chipselect),                                //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ledg_s1_translator (
		.clk                    (altpll_c0_clk),                                     //                      clk.clk
		.reset                  (onchip_memory2_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ledg_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (ledg_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (ledg_s1_agent_m0_read),                             //                         .read
		.uav_write              (ledg_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (ledg_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (ledg_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (ledg_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (ledg_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (ledg_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (ledg_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (ledg_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (ledg_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (ledg_s1_write),                                     //                         .write
		.av_readdata            (ledg_s1_readdata),                                  //                         .readdata
		.av_writedata           (ledg_s1_writedata),                                 //                         .writedata
		.av_chipselect          (ledg_s1_chipselect),                                //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sw_s1_translator (
		.clk                    (altpll_c0_clk),                                     //                      clk.clk
		.reset                  (onchip_memory2_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sw_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (sw_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (sw_s1_agent_m0_read),                               //                         .read
		.uav_write              (sw_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (sw_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (sw_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (sw_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (sw_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (sw_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (sw_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (sw_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (sw_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (sw_s1_write),                                       //                         .write
		.av_readdata            (sw_s1_readdata),                                    //                         .readdata
		.av_writedata           (sw_s1_writedata),                                   //                         .writedata
		.av_chipselect          (sw_s1_chipselect),                                  //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) key_s1_translator (
		.clk                    (altpll_c0_clk),                                     //                      clk.clk
		.reset                  (onchip_memory2_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (key_s1_agent_m0_address),                           // avalon_universal_slave_0.address
		.uav_burstcount         (key_s1_agent_m0_burstcount),                        //                         .burstcount
		.uav_read               (key_s1_agent_m0_read),                              //                         .read
		.uav_write              (key_s1_agent_m0_write),                             //                         .write
		.uav_waitrequest        (key_s1_agent_m0_waitrequest),                       //                         .waitrequest
		.uav_readdatavalid      (key_s1_agent_m0_readdatavalid),                     //                         .readdatavalid
		.uav_byteenable         (key_s1_agent_m0_byteenable),                        //                         .byteenable
		.uav_readdata           (key_s1_agent_m0_readdata),                          //                         .readdata
		.uav_writedata          (key_s1_agent_m0_writedata),                         //                         .writedata
		.uav_lock               (key_s1_agent_m0_lock),                              //                         .lock
		.uav_debugaccess        (key_s1_agent_m0_debugaccess),                       //                         .debugaccess
		.av_address             (key_s1_address),                                    //      avalon_anti_slave_0.address
		.av_write               (key_s1_write),                                      //                         .write
		.av_readdata            (key_s1_readdata),                                   //                         .readdata
		.av_writedata           (key_s1_writedata),                                  //                         .writedata
		.av_chipselect          (key_s1_chipselect),                                 //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) floatdata_output_s1_translator (
		.clk                    (altpll_c0_clk),                                     //                      clk.clk
		.reset                  (onchip_memory2_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (floatdata_output_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (floatdata_output_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (floatdata_output_s1_agent_m0_read),                 //                         .read
		.uav_write              (floatdata_output_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (floatdata_output_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (floatdata_output_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (floatdata_output_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (floatdata_output_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (floatdata_output_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (floatdata_output_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (floatdata_output_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (floatdata_output_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (floatdata_output_s1_write),                         //                         .write
		.av_readdata            (floatdata_output_s1_readdata),                      //                         .readdata
		.av_writedata           (floatdata_output_s1_writedata),                     //                         .writedata
		.av_chipselect          (floatdata_output_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sync_data_s1_translator (
		.clk                    (altpll_c0_clk),                                     //                      clk.clk
		.reset                  (onchip_memory2_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sync_data_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (sync_data_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (sync_data_s1_agent_m0_read),                        //                         .read
		.uav_write              (sync_data_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (sync_data_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (sync_data_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (sync_data_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (sync_data_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (sync_data_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (sync_data_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (sync_data_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (sync_data_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (sync_data_s1_write),                                //                         .write
		.av_readdata            (sync_data_s1_readdata),                             //                         .readdata
		.av_writedata           (sync_data_s1_writedata),                            //                         .writedata
		.av_chipselect          (sync_data_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pixel_index_s1_translator (
		.clk                    (altpll_c0_clk),                                     //                      clk.clk
		.reset                  (onchip_memory2_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pixel_index_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (pixel_index_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (pixel_index_s1_agent_m0_read),                      //                         .read
		.uav_write              (pixel_index_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (pixel_index_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (pixel_index_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (pixel_index_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (pixel_index_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (pixel_index_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (pixel_index_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (pixel_index_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (pixel_index_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (pixel_index_s1_write),                              //                         .write
		.av_readdata            (pixel_index_s1_readdata),                           //                         .readdata
		.av_writedata           (pixel_index_s1_writedata),                          //                         .writedata
		.av_chipselect          (pixel_index_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) weight_index_s1_translator (
		.clk                    (altpll_c0_clk),                                     //                      clk.clk
		.reset                  (onchip_memory2_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (weight_index_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (weight_index_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (weight_index_s1_agent_m0_read),                     //                         .read
		.uav_write              (weight_index_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (weight_index_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (weight_index_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (weight_index_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (weight_index_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (weight_index_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (weight_index_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (weight_index_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (weight_index_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (weight_index_s1_write),                             //                         .write
		.av_readdata            (weight_index_s1_readdata),                          //                         .readdata
		.av_writedata           (weight_index_s1_writedata),                         //                         .writedata
		.av_chipselect          (weight_index_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) results_input_s1_translator (
		.clk                    (altpll_c0_clk),                                     //                      clk.clk
		.reset                  (onchip_memory2_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (results_input_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (results_input_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (results_input_s1_agent_m0_read),                    //                         .read
		.uav_write              (results_input_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (results_input_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (results_input_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (results_input_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (results_input_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (results_input_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (results_input_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (results_input_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (results_input_s1_address),                          //      avalon_anti_slave_0.address
		.av_readdata            (results_input_s1_readdata),                         //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) activations_index_s1_translator (
		.clk                    (altpll_c0_clk),                                     //                      clk.clk
		.reset                  (onchip_memory2_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (activations_index_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (activations_index_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (activations_index_s1_agent_m0_read),                //                         .read
		.uav_write              (activations_index_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (activations_index_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (activations_index_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (activations_index_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (activations_index_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (activations_index_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (activations_index_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (activations_index_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (activations_index_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (activations_index_s1_write),                        //                         .write
		.av_readdata            (activations_index_s1_readdata),                     //                         .readdata
		.av_writedata           (activations_index_s1_writedata),                    //                         .writedata
		.av_chipselect          (activations_index_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (23),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (26),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cfi_flash_uas_translator (
		.clk                    (altpll_c0_clk),                         //                      clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (cfi_flash_uas_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (cfi_flash_uas_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (cfi_flash_uas_agent_m0_read),           //                         .read
		.uav_write              (cfi_flash_uas_agent_m0_write),          //                         .write
		.uav_waitrequest        (cfi_flash_uas_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (cfi_flash_uas_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (cfi_flash_uas_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (cfi_flash_uas_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (cfi_flash_uas_agent_m0_writedata),      //                         .writedata
		.uav_lock               (cfi_flash_uas_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (cfi_flash_uas_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (cfi_flash_uas_address),                 //      avalon_anti_slave_0.address
		.av_write               (cfi_flash_uas_write),                   //                         .write
		.av_read                (cfi_flash_uas_read),                    //                         .read
		.av_readdata            (cfi_flash_uas_readdata),                //                         .readdata
		.av_writedata           (cfi_flash_uas_writedata),               //                         .writedata
		.av_burstcount          (cfi_flash_uas_burstcount),              //                         .burstcount
		.av_byteenable          (cfi_flash_uas_byteenable),              //                         .byteenable
		.av_readdatavalid       (cfi_flash_uas_readdatavalid),           //                         .readdatavalid
		.av_waitrequest         (cfi_flash_uas_waitrequest),             //                         .waitrequest
		.av_lock                (cfi_flash_uas_lock),                    //                         .lock
		.av_debugaccess         (cfi_flash_uas_debugaccess),             //                         .debugaccess
		.av_begintransfer       (),                                      //              (terminated)
		.av_beginbursttransfer  (),                                      //              (terminated)
		.av_writebyteenable     (),                                      //              (terminated)
		.av_chipselect          (),                                      //              (terminated)
		.av_clken               (),                                      //              (terminated)
		.uav_clken              (1'b0),                                  //              (terminated)
		.av_outputenable        (),                                      //              (terminated)
		.uav_response           (),                                      //              (terminated)
		.av_response            (2'b00),                                 //              (terminated)
		.uav_writeresponsevalid (),                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                   //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                   (altpll_c0_clk),                                                      //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_EXCLUSIVE       (67),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                   (altpll_c0_clk),                                                             //       clk.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (78),
		.PKT_ORI_BURST_SIZE_L      (76),
		.PKT_RESPONSE_STATUS_H     (75),
		.PKT_RESPONSE_STATUS_L     (74),
		.PKT_BURST_SIZE_H          (49),
		.PKT_BURST_SIZE_L          (47),
		.PKT_TRANS_LOCK            (39),
		.PKT_BEGIN_BURST           (54),
		.PKT_PROTECTION_H          (69),
		.PKT_PROTECTION_L          (67),
		.PKT_BURSTWRAP_H           (46),
		.PKT_BURSTWRAP_L           (44),
		.PKT_BYTE_CNT_H            (43),
		.PKT_BYTE_CNT_L            (41),
		.PKT_ADDR_H                (34),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (35),
		.PKT_TRANS_POSTED          (36),
		.PKT_TRANS_WRITE           (37),
		.PKT_TRANS_READ            (38),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (60),
		.PKT_SRC_ID_L              (56),
		.PKT_DEST_ID_H             (65),
		.PKT_DEST_ID_L             (61),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (79),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent (
		.clk                     (video_pll_0_vga_clk_clk),                                                                        //             clk.clk
		.reset                   (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                                                  //                .error
		.rdata_fifo_src_ready    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (80),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo (
		.clk               (video_pll_0_vga_clk_clk),                                                                     //       clk.clk
		.reset             (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                       // (terminated)
		.csr_read          (1'b0),                                                                                        // (terminated)
		.csr_write         (1'b0),                                                                                        // (terminated)
		.csr_readdata      (),                                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                        // (terminated)
		.almost_full_data  (),                                                                                            // (terminated)
		.almost_empty_data (),                                                                                            // (terminated)
		.in_empty          (1'b0),                                                                                        // (terminated)
		.out_empty         (),                                                                                            // (terminated)
		.in_error          (1'b0),                                                                                        // (terminated)
		.out_error         (),                                                                                            // (terminated)
		.in_channel        (1'b0),                                                                                        // (terminated)
		.out_channel       ()                                                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo (
		.clk               (video_pll_0_vga_clk_clk),                                                               //       clk.clk
		.reset             (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                 // (terminated)
		.csr_read          (1'b0),                                                                                  // (terminated)
		.csr_write         (1'b0),                                                                                  // (terminated)
		.csr_readdata      (),                                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                  // (terminated)
		.almost_full_data  (),                                                                                      // (terminated)
		.almost_empty_data (),                                                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                                                  // (terminated)
		.out_startofpacket (),                                                                                      // (terminated)
		.out_endofpacket   (),                                                                                      // (terminated)
		.in_empty          (1'b0),                                                                                  // (terminated)
		.out_empty         (),                                                                                      // (terminated)
		.in_error          (1'b0),                                                                                  // (terminated)
		.out_error         (),                                                                                      // (terminated)
		.in_channel        (1'b0),                                                                                  // (terminated)
		.out_channel       ()                                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_character_buffer_with_dma_0_avalon_char_control_slave_agent (
		.clk                     (video_pll_0_vga_clk_clk),                                                                      //             clk.clk
		.reset                   (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                                                        //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                                                        //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                                                         //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                                                  //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                                                      //                .channel
		.rf_sink_ready           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                                            //                .error
		.rdata_fifo_src_ready    (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo (
		.clk               (video_pll_0_vga_clk_clk),                                                                      //       clk.clk
		.reset             (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                        // (terminated)
		.csr_read          (1'b0),                                                                                         // (terminated)
		.csr_write         (1'b0),                                                                                         // (terminated)
		.csr_readdata      (),                                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                         // (terminated)
		.almost_full_data  (),                                                                                             // (terminated)
		.almost_empty_data (),                                                                                             // (terminated)
		.in_empty          (1'b0),                                                                                         // (terminated)
		.out_empty         (),                                                                                             // (terminated)
		.in_error          (1'b0),                                                                                         // (terminated)
		.out_error         (),                                                                                             // (terminated)
		.in_channel        (1'b0),                                                                                         // (terminated)
		.out_channel       ()                                                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo (
		.clk               (video_pll_0_vga_clk_clk),                                                                //       clk.clk
		.reset             (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                  // (terminated)
		.csr_read          (1'b0),                                                                                   // (terminated)
		.csr_write         (1'b0),                                                                                   // (terminated)
		.csr_readdata      (),                                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                   // (terminated)
		.almost_full_data  (),                                                                                       // (terminated)
		.almost_empty_data (),                                                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                                                   // (terminated)
		.out_startofpacket (),                                                                                       // (terminated)
		.out_endofpacket   (),                                                                                       // (terminated)
		.in_empty          (1'b0),                                                                                   // (terminated)
		.out_empty         (),                                                                                       // (terminated)
		.in_error          (1'b0),                                                                                   // (terminated)
		.out_error         (),                                                                                       // (terminated)
		.in_channel        (1'b0),                                                                                   // (terminated)
		.out_channel       ()                                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (altpll_c0_clk),                                                //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                                //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_debug_mem_slave_agent (
		.clk                     (altpll_c0_clk),                                        //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                              //                .channel
		.rf_sink_ready           (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (cpu_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_debug_mem_slave_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                        //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) altpll_pll_slave_agent (
		.clk                     (clk_50_clk_clk),                                           //             clk.clk
		.reset                   (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (altpll_pll_slave_agent_m0_address),                        //              m0.address
		.m0_burstcount           (altpll_pll_slave_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (altpll_pll_slave_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (altpll_pll_slave_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (altpll_pll_slave_agent_m0_lock),                           //                .lock
		.m0_readdata             (altpll_pll_slave_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (altpll_pll_slave_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (altpll_pll_slave_agent_m0_read),                           //                .read
		.m0_waitrequest          (altpll_pll_slave_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (altpll_pll_slave_agent_m0_writedata),                      //                .writedata
		.m0_write                (altpll_pll_slave_agent_m0_write),                          //                .write
		.rp_endofpacket          (altpll_pll_slave_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (altpll_pll_slave_agent_rp_ready),                          //                .ready
		.rp_valid                (altpll_pll_slave_agent_rp_valid),                          //                .valid
		.rp_data                 (altpll_pll_slave_agent_rp_data),                           //                .data
		.rp_startofpacket        (altpll_pll_slave_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                  //                .channel
		.rf_sink_ready           (altpll_pll_slave_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (altpll_pll_slave_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (altpll_pll_slave_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (altpll_pll_slave_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (altpll_pll_slave_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (altpll_pll_slave_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (altpll_pll_slave_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (altpll_pll_slave_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (altpll_pll_slave_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (altpll_pll_slave_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (altpll_pll_slave_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (altpll_pll_slave_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (altpll_pll_slave_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_pll_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                           //       clk.clk
		.reset             (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_pll_slave_agent_rf_source_data),                    //        in.data
		.in_valid          (altpll_pll_slave_agent_rf_source_valid),                   //          .valid
		.in_ready          (altpll_pll_slave_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (altpll_pll_slave_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (altpll_pll_slave_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (altpll_pll_slave_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (altpll_pll_slave_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (altpll_pll_slave_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (altpll_pll_slave_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (altpll_pll_slave_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_pll_slave_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                           //       clk.clk
		.reset             (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_pll_slave_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (altpll_pll_slave_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (altpll_pll_slave_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (altpll_pll_slave_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (altpll_pll_slave_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (altpll_pll_slave_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) clock_crossing_io_s0_agent (
		.clk                     (altpll_c0_clk),                                         //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (clock_crossing_io_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (clock_crossing_io_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (clock_crossing_io_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (clock_crossing_io_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (clock_crossing_io_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (clock_crossing_io_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (clock_crossing_io_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (clock_crossing_io_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (clock_crossing_io_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (clock_crossing_io_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (clock_crossing_io_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (clock_crossing_io_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (clock_crossing_io_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (clock_crossing_io_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (clock_crossing_io_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (clock_crossing_io_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                               //                .channel
		.rf_sink_ready           (clock_crossing_io_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (clock_crossing_io_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (clock_crossing_io_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (clock_crossing_io_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (clock_crossing_io_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (clock_crossing_io_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (clock_crossing_io_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (clock_crossing_io_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (clock_crossing_io_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (clock_crossing_io_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (clock_crossing_io_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (clock_crossing_io_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (clock_crossing_io_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (129),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) clock_crossing_io_s0_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                         //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (clock_crossing_io_s0_agent_rf_source_data),             //        in.data
		.in_valid          (clock_crossing_io_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (clock_crossing_io_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (clock_crossing_io_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (clock_crossing_io_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (clock_crossing_io_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (clock_crossing_io_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (clock_crossing_io_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (clock_crossing_io_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (clock_crossing_io_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_s1_agent (
		.clk                     (altpll_c0_clk),                                      //             clk.clk
		.reset                   (onchip_memory2_reset1_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (onchip_memory2_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_006_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                            //                .channel
		.rf_sink_ready           (onchip_memory2_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (onchip_memory2_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                      //       clk.clk
		.reset             (onchip_memory2_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (onchip_memory2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ledr_s1_agent (
		.clk                     (altpll_c0_clk),                                     //             clk.clk
		.reset                   (onchip_memory2_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ledr_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (ledr_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (ledr_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (ledr_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (ledr_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (ledr_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (ledr_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (ledr_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (ledr_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (ledr_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (ledr_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (ledr_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (ledr_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (ledr_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (ledr_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (ledr_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_007_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                           //                .channel
		.rf_sink_ready           (ledr_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (ledr_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (ledr_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (ledr_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (ledr_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (ledr_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (ledr_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (ledr_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (ledr_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (ledr_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (ledr_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ledr_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (ledr_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledr_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                     //       clk.clk
		.reset             (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ledr_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (ledr_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (ledr_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (ledr_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (ledr_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (ledr_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (ledr_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (ledr_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (ledr_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (ledr_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ledg_s1_agent (
		.clk                     (altpll_c0_clk),                                     //             clk.clk
		.reset                   (onchip_memory2_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ledg_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (ledg_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (ledg_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (ledg_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (ledg_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (ledg_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (ledg_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (ledg_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (ledg_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (ledg_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (ledg_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (ledg_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (ledg_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (ledg_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (ledg_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (ledg_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_008_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                           //                .channel
		.rf_sink_ready           (ledg_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (ledg_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (ledg_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (ledg_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (ledg_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (ledg_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (ledg_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (ledg_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (ledg_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (ledg_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (ledg_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ledg_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (ledg_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledg_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                     //       clk.clk
		.reset             (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ledg_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (ledg_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (ledg_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (ledg_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (ledg_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (ledg_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (ledg_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (ledg_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (ledg_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (ledg_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sw_s1_agent (
		.clk                     (altpll_c0_clk),                                     //             clk.clk
		.reset                   (onchip_memory2_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sw_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (sw_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (sw_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (sw_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (sw_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (sw_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (sw_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (sw_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (sw_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (sw_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (sw_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (sw_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (sw_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (sw_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (sw_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (sw_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_009_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                           //                .channel
		.rf_sink_ready           (sw_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (sw_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (sw_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (sw_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (sw_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (sw_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (sw_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (sw_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (sw_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (sw_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (sw_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sw_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (sw_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                     //       clk.clk
		.reset             (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sw_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (sw_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (sw_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (sw_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (sw_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (sw_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (sw_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (sw_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (sw_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (sw_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) key_s1_agent (
		.clk                     (altpll_c0_clk),                                     //             clk.clk
		.reset                   (onchip_memory2_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (key_s1_agent_m0_address),                           //              m0.address
		.m0_burstcount           (key_s1_agent_m0_burstcount),                        //                .burstcount
		.m0_byteenable           (key_s1_agent_m0_byteenable),                        //                .byteenable
		.m0_debugaccess          (key_s1_agent_m0_debugaccess),                       //                .debugaccess
		.m0_lock                 (key_s1_agent_m0_lock),                              //                .lock
		.m0_readdata             (key_s1_agent_m0_readdata),                          //                .readdata
		.m0_readdatavalid        (key_s1_agent_m0_readdatavalid),                     //                .readdatavalid
		.m0_read                 (key_s1_agent_m0_read),                              //                .read
		.m0_waitrequest          (key_s1_agent_m0_waitrequest),                       //                .waitrequest
		.m0_writedata            (key_s1_agent_m0_writedata),                         //                .writedata
		.m0_write                (key_s1_agent_m0_write),                             //                .write
		.rp_endofpacket          (key_s1_agent_rp_endofpacket),                       //              rp.endofpacket
		.rp_ready                (key_s1_agent_rp_ready),                             //                .ready
		.rp_valid                (key_s1_agent_rp_valid),                             //                .valid
		.rp_data                 (key_s1_agent_rp_data),                              //                .data
		.rp_startofpacket        (key_s1_agent_rp_startofpacket),                     //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_010_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                           //                .channel
		.rf_sink_ready           (key_s1_agent_rsp_fifo_out_ready),                   //         rf_sink.ready
		.rf_sink_valid           (key_s1_agent_rsp_fifo_out_valid),                   //                .valid
		.rf_sink_startofpacket   (key_s1_agent_rsp_fifo_out_startofpacket),           //                .startofpacket
		.rf_sink_endofpacket     (key_s1_agent_rsp_fifo_out_endofpacket),             //                .endofpacket
		.rf_sink_data            (key_s1_agent_rsp_fifo_out_data),                    //                .data
		.rf_source_ready         (key_s1_agent_rf_source_ready),                      //       rf_source.ready
		.rf_source_valid         (key_s1_agent_rf_source_valid),                      //                .valid
		.rf_source_startofpacket (key_s1_agent_rf_source_startofpacket),              //                .startofpacket
		.rf_source_endofpacket   (key_s1_agent_rf_source_endofpacket),                //                .endofpacket
		.rf_source_data          (key_s1_agent_rf_source_data),                       //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (key_s1_agent_rdata_fifo_src_ready),                 //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (key_s1_agent_rdata_fifo_src_valid),                 //                .valid
		.rdata_fifo_src_data     (key_s1_agent_rdata_fifo_src_data),                  //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                     //       clk.clk
		.reset             (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (key_s1_agent_rf_source_data),                       //        in.data
		.in_valid          (key_s1_agent_rf_source_valid),                      //          .valid
		.in_ready          (key_s1_agent_rf_source_ready),                      //          .ready
		.in_startofpacket  (key_s1_agent_rf_source_startofpacket),              //          .startofpacket
		.in_endofpacket    (key_s1_agent_rf_source_endofpacket),                //          .endofpacket
		.out_data          (key_s1_agent_rsp_fifo_out_data),                    //       out.data
		.out_valid         (key_s1_agent_rsp_fifo_out_valid),                   //          .valid
		.out_ready         (key_s1_agent_rsp_fifo_out_ready),                   //          .ready
		.out_startofpacket (key_s1_agent_rsp_fifo_out_startofpacket),           //          .startofpacket
		.out_endofpacket   (key_s1_agent_rsp_fifo_out_endofpacket),             //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) floatdata_output_s1_agent (
		.clk                     (altpll_c0_clk),                                        //             clk.clk
		.reset                   (onchip_memory2_reset1_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (floatdata_output_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (floatdata_output_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (floatdata_output_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (floatdata_output_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (floatdata_output_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (floatdata_output_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (floatdata_output_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (floatdata_output_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (floatdata_output_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (floatdata_output_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (floatdata_output_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (floatdata_output_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (floatdata_output_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (floatdata_output_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (floatdata_output_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (floatdata_output_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                              //                .channel
		.rf_sink_ready           (floatdata_output_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (floatdata_output_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (floatdata_output_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (floatdata_output_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (floatdata_output_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (floatdata_output_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (floatdata_output_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (floatdata_output_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (floatdata_output_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (floatdata_output_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (floatdata_output_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (floatdata_output_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (floatdata_output_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) floatdata_output_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                        //       clk.clk
		.reset             (onchip_memory2_reset1_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (floatdata_output_s1_agent_rf_source_data),             //        in.data
		.in_valid          (floatdata_output_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (floatdata_output_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (floatdata_output_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (floatdata_output_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (floatdata_output_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (floatdata_output_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (floatdata_output_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (floatdata_output_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (floatdata_output_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sync_data_s1_agent (
		.clk                     (altpll_c0_clk),                                     //             clk.clk
		.reset                   (onchip_memory2_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sync_data_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (sync_data_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (sync_data_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (sync_data_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (sync_data_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (sync_data_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (sync_data_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (sync_data_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (sync_data_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (sync_data_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (sync_data_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (sync_data_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (sync_data_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (sync_data_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (sync_data_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (sync_data_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_012_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                           //                .channel
		.rf_sink_ready           (sync_data_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (sync_data_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (sync_data_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (sync_data_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (sync_data_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (sync_data_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (sync_data_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (sync_data_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (sync_data_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (sync_data_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (sync_data_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sync_data_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (sync_data_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sync_data_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                     //       clk.clk
		.reset             (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sync_data_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (sync_data_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (sync_data_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (sync_data_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (sync_data_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (sync_data_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (sync_data_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (sync_data_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (sync_data_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (sync_data_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pixel_index_s1_agent (
		.clk                     (altpll_c0_clk),                                     //             clk.clk
		.reset                   (onchip_memory2_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pixel_index_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (pixel_index_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (pixel_index_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (pixel_index_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (pixel_index_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (pixel_index_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (pixel_index_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (pixel_index_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (pixel_index_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (pixel_index_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (pixel_index_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (pixel_index_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (pixel_index_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (pixel_index_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (pixel_index_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (pixel_index_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_013_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                           //                .channel
		.rf_sink_ready           (pixel_index_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (pixel_index_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (pixel_index_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (pixel_index_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (pixel_index_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (pixel_index_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (pixel_index_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (pixel_index_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (pixel_index_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (pixel_index_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (pixel_index_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pixel_index_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (pixel_index_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_index_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                     //       clk.clk
		.reset             (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pixel_index_s1_agent_rf_source_data),               //        in.data
		.in_valid          (pixel_index_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (pixel_index_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (pixel_index_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (pixel_index_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (pixel_index_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (pixel_index_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (pixel_index_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (pixel_index_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (pixel_index_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) weight_index_s1_agent (
		.clk                     (altpll_c0_clk),                                     //             clk.clk
		.reset                   (onchip_memory2_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (weight_index_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (weight_index_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (weight_index_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (weight_index_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (weight_index_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (weight_index_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (weight_index_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (weight_index_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (weight_index_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (weight_index_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (weight_index_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (weight_index_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (weight_index_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (weight_index_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (weight_index_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (weight_index_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_014_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                           //                .channel
		.rf_sink_ready           (weight_index_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (weight_index_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (weight_index_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (weight_index_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (weight_index_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (weight_index_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (weight_index_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (weight_index_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (weight_index_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (weight_index_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (weight_index_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (weight_index_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (weight_index_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) weight_index_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                     //       clk.clk
		.reset             (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (weight_index_s1_agent_rf_source_data),              //        in.data
		.in_valid          (weight_index_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (weight_index_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (weight_index_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (weight_index_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (weight_index_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (weight_index_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (weight_index_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (weight_index_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (weight_index_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) results_input_s1_agent (
		.clk                     (altpll_c0_clk),                                     //             clk.clk
		.reset                   (onchip_memory2_reset1_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (results_input_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (results_input_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (results_input_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (results_input_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (results_input_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (results_input_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (results_input_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (results_input_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (results_input_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (results_input_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (results_input_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (results_input_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (results_input_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (results_input_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (results_input_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (results_input_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_015_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                           //                .channel
		.rf_sink_ready           (results_input_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (results_input_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (results_input_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (results_input_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (results_input_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (results_input_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (results_input_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (results_input_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (results_input_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (results_input_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (results_input_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (results_input_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (results_input_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) results_input_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                     //       clk.clk
		.reset             (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (results_input_s1_agent_rf_source_data),             //        in.data
		.in_valid          (results_input_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (results_input_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (results_input_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (results_input_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (results_input_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (results_input_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (results_input_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (results_input_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (results_input_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (66),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (71),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_ADDR_H                (61),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (62),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.PKT_TRANS_READ            (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) activations_index_s1_agent (
		.clk                     (altpll_c0_clk),                                         //             clk.clk
		.reset                   (onchip_memory2_reset1_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (activations_index_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (activations_index_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (activations_index_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (activations_index_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (activations_index_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (activations_index_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (activations_index_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (activations_index_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (activations_index_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (activations_index_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (activations_index_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (activations_index_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (activations_index_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (activations_index_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (activations_index_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (activations_index_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_016_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                               //                .channel
		.rf_sink_ready           (activations_index_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (activations_index_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (activations_index_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (activations_index_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (activations_index_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (activations_index_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (activations_index_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (activations_index_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (activations_index_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (activations_index_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (activations_index_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (activations_index_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (activations_index_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) activations_index_s1_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                         //       clk.clk
		.reset             (onchip_memory2_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (activations_index_s1_agent_rf_source_data),             //        in.data
		.in_valid          (activations_index_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (activations_index_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (activations_index_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (activations_index_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (activations_index_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (activations_index_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (activations_index_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (activations_index_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (activations_index_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (78),
		.PKT_ORI_BURST_SIZE_L      (76),
		.PKT_RESPONSE_STATUS_H     (75),
		.PKT_RESPONSE_STATUS_L     (74),
		.PKT_BURST_SIZE_H          (49),
		.PKT_BURST_SIZE_L          (47),
		.PKT_TRANS_LOCK            (39),
		.PKT_BEGIN_BURST           (54),
		.PKT_PROTECTION_H          (69),
		.PKT_PROTECTION_L          (67),
		.PKT_BURSTWRAP_H           (46),
		.PKT_BURSTWRAP_L           (44),
		.PKT_BYTE_CNT_H            (43),
		.PKT_BYTE_CNT_L            (41),
		.PKT_ADDR_H                (34),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (35),
		.PKT_TRANS_POSTED          (36),
		.PKT_TRANS_WRITE           (37),
		.PKT_TRANS_READ            (38),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (60),
		.PKT_SRC_ID_L              (56),
		.PKT_DEST_ID_H             (65),
		.PKT_DEST_ID_L             (61),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (18),
		.ST_DATA_W                 (79),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cfi_flash_uas_agent (
		.clk                     (altpll_c0_clk),                                     //             clk.clk
		.reset                   (cpu_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (cfi_flash_uas_agent_m0_address),                    //              m0.address
		.m0_burstcount           (cfi_flash_uas_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (cfi_flash_uas_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (cfi_flash_uas_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (cfi_flash_uas_agent_m0_lock),                       //                .lock
		.m0_readdata             (cfi_flash_uas_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (cfi_flash_uas_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (cfi_flash_uas_agent_m0_read),                       //                .read
		.m0_waitrequest          (cfi_flash_uas_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (cfi_flash_uas_agent_m0_writedata),                  //                .writedata
		.m0_write                (cfi_flash_uas_agent_m0_write),                      //                .write
		.rp_endofpacket          (cfi_flash_uas_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (cfi_flash_uas_agent_rp_ready),                      //                .ready
		.rp_valid                (cfi_flash_uas_agent_rp_valid),                      //                .valid
		.rp_data                 (cfi_flash_uas_agent_rp_data),                       //                .data
		.rp_startofpacket        (cfi_flash_uas_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cfi_flash_uas_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (cfi_flash_uas_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (cfi_flash_uas_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (cfi_flash_uas_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (cfi_flash_uas_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (cfi_flash_uas_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (cfi_flash_uas_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (cfi_flash_uas_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (cfi_flash_uas_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (cfi_flash_uas_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (cfi_flash_uas_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (cfi_flash_uas_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (cfi_flash_uas_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (cfi_flash_uas_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (cfi_flash_uas_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (cfi_flash_uas_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (cfi_flash_uas_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cfi_flash_uas_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (cfi_flash_uas_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (80),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cfi_flash_uas_agent_rsp_fifo (
		.clk               (altpll_c0_clk),                                  //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (cfi_flash_uas_agent_rf_source_data),             //        in.data
		.in_valid          (cfi_flash_uas_agent_rf_source_valid),            //          .valid
		.in_ready          (cfi_flash_uas_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cfi_flash_uas_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cfi_flash_uas_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cfi_flash_uas_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cfi_flash_uas_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cfi_flash_uas_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cfi_flash_uas_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cfi_flash_uas_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cfi_flash_uas_agent_rdata_fifo (
		.clk               (altpll_c0_clk),                            //       clk.clk
		.reset             (cpu_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (cfi_flash_uas_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (cfi_flash_uas_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (cfi_flash_uas_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (cfi_flash_uas_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (cfi_flash_uas_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (cfi_flash_uas_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_startofpacket  (1'b0),                                     // (terminated)
		.in_endofpacket    (1'b0),                                     // (terminated)
		.out_startofpacket (),                                         // (terminated)
		.out_endofpacket   (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router router (
		.sink_ready         (cpu_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                          //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                       //       src.ready
		.src_valid          (router_src_valid),                       //          .valid
		.src_data           (router_src_data),                        //          .data
		.src_channel        (router_src_channel),                     //          .channel
		.src_startofpacket  (router_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                  //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                                 //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (video_pll_0_vga_clk_clk),                                                           //       clk.clk
		.reset              (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_002_src_ready),                                                              //       src.ready
		.src_valid          (router_002_src_valid),                                                              //          .valid
		.src_data           (router_002_src_data),                                                               //          .data
		.src_channel        (router_002_src_channel),                                                            //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                                         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (video_pll_0_vga_clk_clk),                                                            //       clk.clk
		.reset              (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_003_src_ready),                                                               //       src.ready
		.src_valid          (router_003_src_valid),                                                               //          .valid
		.src_data           (router_003_src_data),                                                                //          .data
		.src_channel        (router_003_src_channel),                                                             //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                                       //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                                          //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                                      //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_004_src_ready),                               //       src.ready
		.src_valid          (router_004_src_valid),                               //          .valid
		.src_data           (router_004_src_data),                                //          .data
		.src_channel        (router_004_src_channel),                             //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                          //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (cpu_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (cpu_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                              //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_005_src_ready),                       //       src.ready
		.src_valid          (router_005_src_valid),                       //          .valid
		.src_data           (router_005_src_data),                        //          .data
		.src_channel        (router_005_src_channel),                     //          .channel
		.src_startofpacket  (router_005_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                  //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_003 router_006 (
		.sink_ready         (altpll_pll_slave_agent_rp_ready),                          //      sink.ready
		.sink_valid         (altpll_pll_slave_agent_rp_valid),                          //          .valid
		.sink_data          (altpll_pll_slave_agent_rp_data),                           //          .data
		.sink_startofpacket (altpll_pll_slave_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (altpll_pll_slave_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_50_clk_clk),                                           //       clk.clk
		.reset              (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                     //       src.ready
		.src_valid          (router_006_src_valid),                                     //          .valid
		.src_data           (router_006_src_data),                                      //          .data
		.src_channel        (router_006_src_channel),                                   //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_003 router_007 (
		.sink_ready         (clock_crossing_io_s0_agent_rp_ready),         //      sink.ready
		.sink_valid         (clock_crossing_io_s0_agent_rp_valid),         //          .valid
		.sink_data          (clock_crossing_io_s0_agent_rp_data),          //          .data
		.sink_startofpacket (clock_crossing_io_s0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (clock_crossing_io_s0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_c0_clk),                               //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_007_src_ready),                        //       src.ready
		.src_valid          (router_007_src_valid),                        //          .valid
		.src_data           (router_007_src_data),                         //          .data
		.src_channel        (router_007_src_channel),                      //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                   //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_005 router_008 (
		.sink_ready         (onchip_memory2_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (onchip_memory2_s1_agent_rp_valid),                  //          .valid
		.sink_data          (onchip_memory2_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (onchip_memory2_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (onchip_memory2_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                              //       src.ready
		.src_valid          (router_008_src_valid),                              //          .valid
		.src_data           (router_008_src_data),                               //          .data
		.src_channel        (router_008_src_channel),                            //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_003 router_009 (
		.sink_ready         (ledr_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (ledr_s1_agent_rp_valid),                            //          .valid
		.sink_data          (ledr_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (ledr_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (ledr_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                              //       src.ready
		.src_valid          (router_009_src_valid),                              //          .valid
		.src_data           (router_009_src_data),                               //          .data
		.src_channel        (router_009_src_channel),                            //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_003 router_010 (
		.sink_ready         (ledg_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (ledg_s1_agent_rp_valid),                            //          .valid
		.sink_data          (ledg_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (ledg_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (ledg_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                              //       src.ready
		.src_valid          (router_010_src_valid),                              //          .valid
		.src_data           (router_010_src_data),                               //          .data
		.src_channel        (router_010_src_channel),                            //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_003 router_011 (
		.sink_ready         (sw_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (sw_s1_agent_rp_valid),                              //          .valid
		.sink_data          (sw_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (sw_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (sw_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                              //       src.ready
		.src_valid          (router_011_src_valid),                              //          .valid
		.src_data           (router_011_src_data),                               //          .data
		.src_channel        (router_011_src_channel),                            //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_003 router_012 (
		.sink_ready         (key_s1_agent_rp_ready),                             //      sink.ready
		.sink_valid         (key_s1_agent_rp_valid),                             //          .valid
		.sink_data          (key_s1_agent_rp_data),                              //          .data
		.sink_startofpacket (key_s1_agent_rp_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (key_s1_agent_rp_endofpacket),                       //          .endofpacket
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                              //       src.ready
		.src_valid          (router_012_src_valid),                              //          .valid
		.src_data           (router_012_src_data),                               //          .data
		.src_channel        (router_012_src_channel),                            //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_003 router_013 (
		.sink_ready         (floatdata_output_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (floatdata_output_s1_agent_rp_valid),                //          .valid
		.sink_data          (floatdata_output_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (floatdata_output_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (floatdata_output_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                              //       src.ready
		.src_valid          (router_013_src_valid),                              //          .valid
		.src_data           (router_013_src_data),                               //          .data
		.src_channel        (router_013_src_channel),                            //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_003 router_014 (
		.sink_ready         (sync_data_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (sync_data_s1_agent_rp_valid),                       //          .valid
		.sink_data          (sync_data_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (sync_data_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (sync_data_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                              //       src.ready
		.src_valid          (router_014_src_valid),                              //          .valid
		.src_data           (router_014_src_data),                               //          .data
		.src_channel        (router_014_src_channel),                            //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_003 router_015 (
		.sink_ready         (pixel_index_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (pixel_index_s1_agent_rp_valid),                     //          .valid
		.sink_data          (pixel_index_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (pixel_index_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (pixel_index_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                              //       src.ready
		.src_valid          (router_015_src_valid),                              //          .valid
		.src_data           (router_015_src_data),                               //          .data
		.src_channel        (router_015_src_channel),                            //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_003 router_016 (
		.sink_ready         (weight_index_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (weight_index_s1_agent_rp_valid),                    //          .valid
		.sink_data          (weight_index_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (weight_index_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (weight_index_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                              //       src.ready
		.src_valid          (router_016_src_valid),                              //          .valid
		.src_data           (router_016_src_data),                               //          .data
		.src_channel        (router_016_src_channel),                            //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_003 router_017 (
		.sink_ready         (results_input_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (results_input_s1_agent_rp_valid),                   //          .valid
		.sink_data          (results_input_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (results_input_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (results_input_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                              //       src.ready
		.src_valid          (router_017_src_valid),                              //          .valid
		.src_data           (router_017_src_data),                               //          .data
		.src_channel        (router_017_src_channel),                            //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_003 router_018 (
		.sink_ready         (activations_index_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (activations_index_s1_agent_rp_valid),               //          .valid
		.sink_data          (activations_index_s1_agent_rp_data),                //          .data
		.sink_startofpacket (activations_index_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (activations_index_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                              //       src.ready
		.src_valid          (router_018_src_valid),                              //          .valid
		.src_data           (router_018_src_data),                               //          .data
		.src_channel        (router_018_src_channel),                            //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_router_019 router_019 (
		.sink_ready         (cfi_flash_uas_agent_rp_ready),          //      sink.ready
		.sink_valid         (cfi_flash_uas_agent_rp_valid),          //          .valid
		.sink_data          (cfi_flash_uas_agent_rp_data),           //          .data
		.sink_startofpacket (cfi_flash_uas_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (cfi_flash_uas_agent_rp_endofpacket),    //          .endofpacket
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                  //       src.ready
		.src_valid          (router_019_src_valid),                  //          .valid
		.src_data           (router_019_src_data),                   //          .data
		.src_channel        (router_019_src_channel),                //          .channel
		.src_startofpacket  (router_019_src_startofpacket),          //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)             //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.MAX_OUTSTANDING_RESPONSES (128),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.VALID_WIDTH               (18),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_data_master_limiter (
		.clk                    (altpll_c0_clk),                                 //       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //          .valid
		.cmd_sink_data          (router_src_data),                               //          .data
		.cmd_sink_channel       (router_src_channel),                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.cmd_src_ready          (cpu_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                             //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                             //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                           //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                              //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                     //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                       //          .endofpacket
		.rsp_src_ready          (cpu_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (83),
		.PKT_BYTE_CNT_H            (70),
		.PKT_BYTE_CNT_L            (68),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (63),
		.PKT_TRANS_WRITE           (64),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (18),
		.VALID_WIDTH               (18),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_instruction_master_limiter (
		.clk                    (altpll_c0_clk),                                        //       clk.clk
		.reset                  (cpu_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                 //          .valid
		.cmd_sink_data          (router_001_src_data),                                  //          .data
		.cmd_sink_channel       (router_001_src_channel),                               //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                         //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                           //          .endofpacket
		.cmd_src_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                              //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                          //          .endofpacket
		.rsp_src_ready          (cpu_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (34),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (54),
		.PKT_BYTE_CNT_H            (43),
		.PKT_BYTE_CNT_L            (41),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (49),
		.PKT_BURST_SIZE_L          (47),
		.PKT_BURST_TYPE_H          (51),
		.PKT_BURST_TYPE_L          (50),
		.PKT_BURSTWRAP_H           (46),
		.PKT_BURSTWRAP_L           (44),
		.PKT_TRANS_COMPRESSED_READ (35),
		.PKT_TRANS_WRITE           (37),
		.PKT_TRANS_READ            (38),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (79),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (41),
		.OUT_BURSTWRAP_H           (46),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter (
		.clk                   (video_pll_0_vga_clk_clk),                                                                        //       cr0.clk
		.reset                 (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                            // cr0_reset.reset
		.sink0_valid           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (34),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (54),
		.PKT_BYTE_CNT_H            (43),
		.PKT_BYTE_CNT_L            (41),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (49),
		.PKT_BURST_SIZE_L          (47),
		.PKT_BURST_TYPE_H          (51),
		.PKT_BURST_TYPE_L          (50),
		.PKT_BURSTWRAP_H           (46),
		.PKT_BURSTWRAP_L           (44),
		.PKT_TRANS_COMPRESSED_READ (35),
		.PKT_TRANS_WRITE           (37),
		.PKT_TRANS_READ            (38),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (79),
		.ST_CHANNEL_W              (18),
		.OUT_BYTE_CNT_H            (41),
		.OUT_BURSTWRAP_H           (46),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) cfi_flash_uas_burst_adapter (
		.clk                   (altpll_c0_clk),                                     //       cr0.clk
		.reset                 (cpu_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cfi_flash_uas_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (cfi_flash_uas_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (cfi_flash_uas_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (cfi_flash_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (cfi_flash_uas_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (cfi_flash_uas_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (cfi_flash_uas_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (cfi_flash_uas_burst_adapter_source0_data),          //          .data
		.source0_channel       (cfi_flash_uas_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (cfi_flash_uas_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (cfi_flash_uas_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (cfi_flash_uas_burst_adapter_source0_ready)          //          .ready
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (altpll_c0_clk),                                 //        clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready          (cpu_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (cpu_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (cpu_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (cpu_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                          //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                          //           .valid
		.src0_data           (cmd_demux_src0_data),                           //           .data
		.src0_channel        (cmd_demux_src0_channel),                        //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                  //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                    //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                          //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                          //           .valid
		.src1_data           (cmd_demux_src1_data),                           //           .data
		.src1_channel        (cmd_demux_src1_channel),                        //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                  //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                    //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                          //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                          //           .valid
		.src2_data           (cmd_demux_src2_data),                           //           .data
		.src2_channel        (cmd_demux_src2_channel),                        //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                  //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                    //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                          //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                          //           .valid
		.src3_data           (cmd_demux_src3_data),                           //           .data
		.src3_channel        (cmd_demux_src3_channel),                        //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                  //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                    //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                          //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                          //           .valid
		.src4_data           (cmd_demux_src4_data),                           //           .data
		.src4_channel        (cmd_demux_src4_channel),                        //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                  //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                    //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                          //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                          //           .valid
		.src5_data           (cmd_demux_src5_data),                           //           .data
		.src5_channel        (cmd_demux_src5_channel),                        //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                  //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                    //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                          //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                          //           .valid
		.src6_data           (cmd_demux_src6_data),                           //           .data
		.src6_channel        (cmd_demux_src6_channel),                        //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                  //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                    //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                          //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                          //           .valid
		.src7_data           (cmd_demux_src7_data),                           //           .data
		.src7_channel        (cmd_demux_src7_channel),                        //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                  //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                    //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                          //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                          //           .valid
		.src8_data           (cmd_demux_src8_data),                           //           .data
		.src8_channel        (cmd_demux_src8_channel),                        //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                  //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                    //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                          //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                          //           .valid
		.src9_data           (cmd_demux_src9_data),                           //           .data
		.src9_channel        (cmd_demux_src9_channel),                        //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                  //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                    //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                         //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                         //           .valid
		.src10_data          (cmd_demux_src10_data),                          //           .data
		.src10_channel       (cmd_demux_src10_channel),                       //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                 //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                   //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                         //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                         //           .valid
		.src11_data          (cmd_demux_src11_data),                          //           .data
		.src11_channel       (cmd_demux_src11_channel),                       //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                 //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                   //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                         //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                         //           .valid
		.src12_data          (cmd_demux_src12_data),                          //           .data
		.src12_channel       (cmd_demux_src12_channel),                       //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                 //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                   //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                         //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                         //           .valid
		.src13_data          (cmd_demux_src13_data),                          //           .data
		.src13_channel       (cmd_demux_src13_channel),                       //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                 //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                   //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                         //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                         //           .valid
		.src14_data          (cmd_demux_src14_data),                          //           .data
		.src14_channel       (cmd_demux_src14_channel),                       //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                 //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                   //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                         //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                         //           .valid
		.src15_data          (cmd_demux_src15_data),                          //           .data
		.src15_channel       (cmd_demux_src15_channel),                       //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                 //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                   //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                         //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                         //           .valid
		.src16_data          (cmd_demux_src16_data),                          //           .data
		.src16_channel       (cmd_demux_src16_channel),                       //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                 //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                   //           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                         //      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                         //           .valid
		.src17_data          (cmd_demux_src17_data),                          //           .data
		.src17_channel       (cmd_demux_src17_channel),                       //           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                 //           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket)                    //           .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (altpll_c0_clk),                                        //        clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (cpu_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                             //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                             //           .valid
		.src0_data          (cmd_demux_001_src0_data),                              //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                           //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                     //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                       //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                             //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                             //           .valid
		.src1_data          (cmd_demux_001_src1_data),                              //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                           //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                     //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                       //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                             //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                             //           .valid
		.src2_data          (cmd_demux_001_src2_data),                              //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                           //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                     //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                        //           .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (video_pll_0_vga_clk_clk),                                             //       clk.clk
		.reset               (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                   //          .valid
		.src_data            (cmd_mux_src_data),                                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                                   //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                                   //          .valid
		.sink0_channel       (crosser_out_channel),                                                 //          .channel
		.sink0_data          (crosser_out_data),                                                    //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                           //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                              //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (video_pll_0_vga_clk_clk),                                             //       clk.clk
		.reset               (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                               //          .valid
		.src_data            (cmd_mux_001_src_data),                                                //          .data
		.src_channel         (cmd_mux_001_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                               //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                               //          .valid
		.sink0_channel       (crosser_001_out_channel),                                             //          .channel
		.sink0_data          (crosser_001_out_data),                                                //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                                          //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                 //          .valid
		.src_data            (cmd_mux_002_src_data),                  //          .data
		.src_channel         (cmd_mux_002_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                //          .channel
		.sink0_data          (cmd_demux_src2_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                 //          .valid
		.src_data            (cmd_mux_003_src_data),                  //          .data
		.src_channel         (cmd_mux_003_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                //          .channel
		.sink0_data          (cmd_demux_src3_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src0_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_50_clk_clk),                                           //       clk.clk
		.reset               (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                    //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                    //          .valid
		.src_data            (cmd_mux_004_src_data),                                     //          .data
		.src_channel         (cmd_mux_004_src_channel),                                  //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                            //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                              //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                    //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                    //          .valid
		.sink0_channel       (crosser_002_out_channel),                                  //          .channel
		.sink0_data          (crosser_002_out_data),                                     //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                               //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                 //          .valid
		.src_data            (cmd_mux_005_src_data),                  //          .data
		.src_channel         (cmd_mux_005_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                  //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                //          .channel
		.sink0_data          (cmd_demux_src5_data),                   //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)             //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux_003 cmd_mux_006 (
		.clk                 (altpll_c0_clk),                                     //       clk.clk
		.reset               (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                             //          .valid
		.src_data            (cmd_mux_006_src_data),                              //          .data
		.src_channel         (cmd_mux_006_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                            //          .channel
		.sink0_data          (cmd_demux_src6_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                     //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (altpll_c0_clk),                                     //       clk.clk
		.reset               (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                             //          .valid
		.src_data            (cmd_mux_007_src_data),                              //          .data
		.src_channel         (cmd_mux_007_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                            //          .channel
		.sink0_data          (cmd_demux_src7_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (altpll_c0_clk),                                     //       clk.clk
		.reset               (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                             //          .valid
		.src_data            (cmd_mux_008_src_data),                              //          .data
		.src_channel         (cmd_mux_008_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                            //          .channel
		.sink0_data          (cmd_demux_src8_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (altpll_c0_clk),                                     //       clk.clk
		.reset               (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                             //          .valid
		.src_data            (cmd_mux_009_src_data),                              //          .data
		.src_channel         (cmd_mux_009_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                            //          .channel
		.sink0_data          (cmd_demux_src9_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (altpll_c0_clk),                                     //       clk.clk
		.reset               (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                             //          .valid
		.src_data            (cmd_mux_010_src_data),                              //          .data
		.src_channel         (cmd_mux_010_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                           //          .channel
		.sink0_data          (cmd_demux_src10_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                        //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (altpll_c0_clk),                                     //       clk.clk
		.reset               (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                             //          .valid
		.src_data            (cmd_mux_011_src_data),                              //          .data
		.src_channel         (cmd_mux_011_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                           //          .channel
		.sink0_data          (cmd_demux_src11_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                        //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (altpll_c0_clk),                                     //       clk.clk
		.reset               (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                             //          .valid
		.src_data            (cmd_mux_012_src_data),                              //          .data
		.src_channel         (cmd_mux_012_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                           //          .channel
		.sink0_data          (cmd_demux_src12_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                        //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (altpll_c0_clk),                                     //       clk.clk
		.reset               (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                             //          .valid
		.src_data            (cmd_mux_013_src_data),                              //          .data
		.src_channel         (cmd_mux_013_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                           //          .channel
		.sink0_data          (cmd_demux_src13_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                        //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (altpll_c0_clk),                                     //       clk.clk
		.reset               (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                             //          .valid
		.src_data            (cmd_mux_014_src_data),                              //          .data
		.src_channel         (cmd_mux_014_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                           //          .channel
		.sink0_data          (cmd_demux_src14_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                        //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (altpll_c0_clk),                                     //       clk.clk
		.reset               (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                             //          .valid
		.src_data            (cmd_mux_015_src_data),                              //          .data
		.src_channel         (cmd_mux_015_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                           //          .channel
		.sink0_data          (cmd_demux_src15_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                        //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (altpll_c0_clk),                                     //       clk.clk
		.reset               (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                             //          .valid
		.src_data            (cmd_mux_016_src_data),                              //          .data
		.src_channel         (cmd_mux_016_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                           //          .channel
		.sink0_data          (cmd_demux_src16_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)                        //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_cmd_mux_003 cmd_mux_017 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                 //          .valid
		.src_data            (cmd_mux_017_src_data),                  //          .data
		.src_channel         (cmd_mux_017_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),           //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                 //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                 //          .valid
		.sink0_channel       (cmd_demux_src17_channel),               //          .channel
		.sink0_data          (cmd_demux_src17_data),                  //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket),           //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),              //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),            //          .channel
		.sink1_data          (cmd_demux_001_src2_data),               //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (video_pll_0_vga_clk_clk),                                                                        //       clk.clk
		.reset              (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.sink_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                                           //          .valid
		.src0_data          (rsp_demux_src0_data),                                                                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                                                                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                                                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                                                      //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (video_pll_0_vga_clk_clk),                                             //       clk.clk
		.reset              (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                                //      sink.ready
		.sink_channel       (router_003_src_channel),                                              //          .channel
		.sink_data          (router_003_src_data),                                                 //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                        //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                          //          .endofpacket
		.sink_valid         (router_003_src_valid),                                                //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                       //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                  //      sink.ready
		.sink_channel       (router_004_src_channel),                //          .channel
		.sink_data          (router_004_src_data),                   //          .data
		.sink_startofpacket (router_004_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_004_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),              //          .valid
		.src0_data          (rsp_demux_002_src0_data),               //          .data
		.src0_channel       (rsp_demux_002_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                  //      sink.ready
		.sink_channel       (router_005_src_channel),                //          .channel
		.sink_data          (router_005_src_data),                   //          .data
		.sink_startofpacket (router_005_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_005_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),              //          .valid
		.src0_data          (rsp_demux_003_src0_data),               //          .data
		.src0_channel       (rsp_demux_003_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),        //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),              //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),              //          .valid
		.src1_data          (rsp_demux_003_src1_data),               //          .data
		.src1_channel       (rsp_demux_003_src1_channel),            //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),      //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (clk_50_clk_clk),                                           //       clk.clk
		.reset              (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                     //      sink.ready
		.sink_channel       (router_006_src_channel),                                   //          .channel
		.sink_data          (router_006_src_data),                                      //          .data
		.sink_startofpacket (router_006_src_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                               //          .endofpacket
		.sink_valid         (router_006_src_valid),                                     //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                 //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                 //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                  //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                               //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                            //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_002 rsp_demux_005 (
		.clk                (altpll_c0_clk),                         //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                  //      sink.ready
		.sink_channel       (router_007_src_channel),                //          .channel
		.sink_data          (router_007_src_data),                   //          .data
		.sink_startofpacket (router_007_src_startofpacket),          //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),            //          .endofpacket
		.sink_valid         (router_007_src_valid),                  //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),              //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),              //          .valid
		.src0_data          (rsp_demux_005_src0_data),               //          .data
		.src0_channel       (rsp_demux_005_src0_channel),            //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),      //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_003 rsp_demux_006 (
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                              //      sink.ready
		.sink_channel       (router_008_src_channel),                            //          .channel
		.sink_data          (router_008_src_data),                               //          .data
		.sink_startofpacket (router_008_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_008_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_006_src0_data),                           //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_006_src1_data),                           //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                     //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_002 rsp_demux_007 (
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                              //      sink.ready
		.sink_channel       (router_009_src_channel),                            //          .channel
		.sink_data          (router_009_src_data),                               //          .data
		.sink_startofpacket (router_009_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_009_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_007_src0_data),                           //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                     //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_002 rsp_demux_008 (
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                              //      sink.ready
		.sink_channel       (router_010_src_channel),                            //          .channel
		.sink_data          (router_010_src_data),                               //          .data
		.sink_startofpacket (router_010_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_010_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_008_src0_data),                           //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                     //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_002 rsp_demux_009 (
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                              //      sink.ready
		.sink_channel       (router_011_src_channel),                            //          .channel
		.sink_data          (router_011_src_data),                               //          .data
		.sink_startofpacket (router_011_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_011_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_009_src0_data),                           //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                     //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_002 rsp_demux_010 (
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                              //      sink.ready
		.sink_channel       (router_012_src_channel),                            //          .channel
		.sink_data          (router_012_src_data),                               //          .data
		.sink_startofpacket (router_012_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_012_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_010_src0_data),                           //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                     //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_002 rsp_demux_011 (
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                              //      sink.ready
		.sink_channel       (router_013_src_channel),                            //          .channel
		.sink_data          (router_013_src_data),                               //          .data
		.sink_startofpacket (router_013_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_013_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_011_src0_data),                           //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                     //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_002 rsp_demux_012 (
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                              //      sink.ready
		.sink_channel       (router_014_src_channel),                            //          .channel
		.sink_data          (router_014_src_data),                               //          .data
		.sink_startofpacket (router_014_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_014_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_012_src0_data),                           //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                     //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_002 rsp_demux_013 (
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                              //      sink.ready
		.sink_channel       (router_015_src_channel),                            //          .channel
		.sink_data          (router_015_src_data),                               //          .data
		.sink_startofpacket (router_015_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_015_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_013_src0_data),                           //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                     //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_002 rsp_demux_014 (
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                              //      sink.ready
		.sink_channel       (router_016_src_channel),                            //          .channel
		.sink_data          (router_016_src_data),                               //          .data
		.sink_startofpacket (router_016_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_016_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_014_src0_data),                           //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                     //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_002 rsp_demux_015 (
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                              //      sink.ready
		.sink_channel       (router_017_src_channel),                            //          .channel
		.sink_data          (router_017_src_data),                               //          .data
		.sink_startofpacket (router_017_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_017_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_015_src0_data),                           //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                     //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_002 rsp_demux_016 (
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                              //      sink.ready
		.sink_channel       (router_018_src_channel),                            //          .channel
		.sink_data          (router_018_src_data),                               //          .data
		.sink_startofpacket (router_018_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_018_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_016_src0_data),                           //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                     //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_demux_003 rsp_demux_017 (
		.clk                (altpll_c0_clk),                                     //       clk.clk
		.reset              (cpu_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.sink_ready         (cfi_flash_uas_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (cfi_flash_uas_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (cfi_flash_uas_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (cfi_flash_uas_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (cfi_flash_uas_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (cfi_flash_uas_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_017_src0_data),                           //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_017_src1_data),                           //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket)                     //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (altpll_c0_clk),                         //       clk.clk
		.reset                (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                     //       src.ready
		.src_valid            (rsp_mux_src_valid),                     //          .valid
		.src_data             (rsp_mux_src_data),                      //          .data
		.src_channel          (rsp_mux_src_channel),                   //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),             //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),               //          .endofpacket
		.sink0_ready          (crosser_003_out_ready),                 //     sink0.ready
		.sink0_valid          (crosser_003_out_valid),                 //          .valid
		.sink0_channel        (crosser_003_out_channel),               //          .channel
		.sink0_data           (crosser_003_out_data),                  //          .data
		.sink0_startofpacket  (crosser_003_out_startofpacket),         //          .startofpacket
		.sink0_endofpacket    (crosser_003_out_endofpacket),           //          .endofpacket
		.sink1_ready          (crosser_004_out_ready),                 //     sink1.ready
		.sink1_valid          (crosser_004_out_valid),                 //          .valid
		.sink1_channel        (crosser_004_out_channel),               //          .channel
		.sink1_data           (crosser_004_out_data),                  //          .data
		.sink1_startofpacket  (crosser_004_out_startofpacket),         //          .startofpacket
		.sink1_endofpacket    (crosser_004_out_endofpacket),           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),              //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),              //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),            //          .channel
		.sink2_data           (rsp_demux_002_src0_data),               //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),      //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),        //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),              //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),              //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),            //          .channel
		.sink3_data           (rsp_demux_003_src0_data),               //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),      //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),        //          .endofpacket
		.sink4_ready          (crosser_005_out_ready),                 //     sink4.ready
		.sink4_valid          (crosser_005_out_valid),                 //          .valid
		.sink4_channel        (crosser_005_out_channel),               //          .channel
		.sink4_data           (crosser_005_out_data),                  //          .data
		.sink4_startofpacket  (crosser_005_out_startofpacket),         //          .startofpacket
		.sink4_endofpacket    (crosser_005_out_endofpacket),           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),              //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),              //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),            //          .channel
		.sink5_data           (rsp_demux_005_src0_data),               //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),      //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),        //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),              //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),              //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),            //          .channel
		.sink6_data           (rsp_demux_006_src0_data),               //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),      //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),        //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),              //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),              //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),            //          .channel
		.sink7_data           (rsp_demux_007_src0_data),               //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),      //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),        //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),              //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),              //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),            //          .channel
		.sink8_data           (rsp_demux_008_src0_data),               //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),      //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),        //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),              //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),              //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),            //          .channel
		.sink9_data           (rsp_demux_009_src0_data),               //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),      //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),        //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),              //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),              //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),            //          .channel
		.sink10_data          (rsp_demux_010_src0_data),               //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),      //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),        //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),              //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),              //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),            //          .channel
		.sink11_data          (rsp_demux_011_src0_data),               //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),      //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),        //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),              //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),              //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),            //          .channel
		.sink12_data          (rsp_demux_012_src0_data),               //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),      //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),        //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),              //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),              //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),            //          .channel
		.sink13_data          (rsp_demux_013_src0_data),               //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),      //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),        //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),              //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),              //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),            //          .channel
		.sink14_data          (rsp_demux_014_src0_data),               //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),      //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),        //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),              //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),              //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),            //          .channel
		.sink15_data          (rsp_demux_015_src0_data),               //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),      //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),        //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),              //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),              //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),            //          .channel
		.sink16_data          (rsp_demux_016_src0_data),               //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),      //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),        //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),              //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),              //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),            //          .channel
		.sink17_data          (rsp_demux_017_src0_data),               //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),      //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket)         //          .endofpacket
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (altpll_c0_clk),                         //       clk.clk
		.reset               (cpu_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                 //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                 //          .valid
		.src_data            (rsp_mux_001_src_data),                  //          .data
		.src_channel         (rsp_mux_001_src_channel),               //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),           //          .endofpacket
		.sink0_ready         (rsp_demux_003_src1_ready),              //     sink0.ready
		.sink0_valid         (rsp_demux_003_src1_valid),              //          .valid
		.sink0_channel       (rsp_demux_003_src1_channel),            //          .channel
		.sink0_data          (rsp_demux_003_src1_data),               //          .data
		.sink0_startofpacket (rsp_demux_003_src1_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src1_endofpacket),        //          .endofpacket
		.sink1_ready         (rsp_demux_006_src1_ready),              //     sink1.ready
		.sink1_valid         (rsp_demux_006_src1_valid),              //          .valid
		.sink1_channel       (rsp_demux_006_src1_channel),            //          .channel
		.sink1_data          (rsp_demux_006_src1_data),               //          .data
		.sink1_startofpacket (rsp_demux_006_src1_startofpacket),      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_006_src1_endofpacket),        //          .endofpacket
		.sink2_ready         (rsp_demux_017_src1_ready),              //     sink2.ready
		.sink2_valid         (rsp_demux_017_src1_valid),              //          .valid
		.sink2_channel       (rsp_demux_017_src1_channel),            //          .channel
		.sink2_data          (rsp_demux_017_src1_data),               //          .data
		.sink2_startofpacket (rsp_demux_017_src1_startofpacket),      //          .startofpacket
		.sink2_endofpacket   (rsp_demux_017_src1_endofpacket)         //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (34),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (43),
		.IN_PKT_BYTE_CNT_L             (41),
		.IN_PKT_TRANS_COMPRESSED_READ  (35),
		.IN_PKT_TRANS_WRITE            (37),
		.IN_PKT_BURSTWRAP_H            (46),
		.IN_PKT_BURSTWRAP_L            (44),
		.IN_PKT_BURST_SIZE_H           (49),
		.IN_PKT_BURST_SIZE_L           (47),
		.IN_PKT_RESPONSE_STATUS_H      (75),
		.IN_PKT_RESPONSE_STATUS_L      (74),
		.IN_PKT_TRANS_EXCLUSIVE        (40),
		.IN_PKT_BURST_TYPE_H           (51),
		.IN_PKT_BURST_TYPE_L           (50),
		.IN_PKT_ORI_BURST_SIZE_L       (76),
		.IN_PKT_ORI_BURST_SIZE_H       (78),
		.IN_ST_DATA_W                  (79),
		.OUT_PKT_ADDR_H                (61),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (70),
		.OUT_PKT_BYTE_CNT_L            (68),
		.OUT_PKT_TRANS_COMPRESSED_READ (62),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (102),
		.OUT_PKT_RESPONSE_STATUS_L     (101),
		.OUT_PKT_TRANS_EXCLUSIVE       (67),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (103),
		.OUT_PKT_ORI_BURST_SIZE_H      (105),
		.OUT_ST_DATA_W                 (106),
		.ST_CHANNEL_W                  (18),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter (
		.clk                  (video_pll_0_vga_clk_clk),                                                                        //       clk.clk
		.reset                (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (router_002_src_valid),                                                                           //      sink.valid
		.in_channel           (router_002_src_channel),                                                                         //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                                                   //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                                                     //          .endofpacket
		.in_ready             (router_002_src_ready),                                                                           //          .ready
		.in_data              (router_002_src_data),                                                                            //          .data
		.out_endofpacket      (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (34),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (43),
		.IN_PKT_BYTE_CNT_L             (41),
		.IN_PKT_TRANS_COMPRESSED_READ  (35),
		.IN_PKT_TRANS_WRITE            (37),
		.IN_PKT_BURSTWRAP_H            (46),
		.IN_PKT_BURSTWRAP_L            (44),
		.IN_PKT_BURST_SIZE_H           (49),
		.IN_PKT_BURST_SIZE_L           (47),
		.IN_PKT_RESPONSE_STATUS_H      (75),
		.IN_PKT_RESPONSE_STATUS_L      (74),
		.IN_PKT_TRANS_EXCLUSIVE        (40),
		.IN_PKT_BURST_TYPE_H           (51),
		.IN_PKT_BURST_TYPE_L           (50),
		.IN_PKT_ORI_BURST_SIZE_L       (76),
		.IN_PKT_ORI_BURST_SIZE_H       (78),
		.IN_ST_DATA_W                  (79),
		.OUT_PKT_ADDR_H                (61),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (70),
		.OUT_PKT_BYTE_CNT_L            (68),
		.OUT_PKT_TRANS_COMPRESSED_READ (62),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (102),
		.OUT_PKT_RESPONSE_STATUS_L     (101),
		.OUT_PKT_TRANS_EXCLUSIVE       (67),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (103),
		.OUT_PKT_ORI_BURST_SIZE_H      (105),
		.OUT_ST_DATA_W                 (106),
		.ST_CHANNEL_W                  (18),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) cfi_flash_uas_rsp_width_adapter (
		.clk                  (altpll_c0_clk),                                     //       clk.clk
		.reset                (cpu_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_valid             (router_019_src_valid),                              //      sink.valid
		.in_channel           (router_019_src_channel),                            //          .channel
		.in_startofpacket     (router_019_src_startofpacket),                      //          .startofpacket
		.in_endofpacket       (router_019_src_endofpacket),                        //          .endofpacket
		.in_ready             (router_019_src_ready),                              //          .ready
		.in_data              (router_019_src_data),                               //          .data
		.out_endofpacket      (cfi_flash_uas_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (cfi_flash_uas_rsp_width_adapter_src_data),          //          .data
		.out_channel          (cfi_flash_uas_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (cfi_flash_uas_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (cfi_flash_uas_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (cfi_flash_uas_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (61),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (70),
		.IN_PKT_BYTE_CNT_L             (68),
		.IN_PKT_TRANS_COMPRESSED_READ  (62),
		.IN_PKT_TRANS_WRITE            (64),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (71),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (102),
		.IN_PKT_RESPONSE_STATUS_L      (101),
		.IN_PKT_TRANS_EXCLUSIVE        (67),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (103),
		.IN_PKT_ORI_BURST_SIZE_H       (105),
		.IN_ST_DATA_W                  (106),
		.OUT_PKT_ADDR_H                (34),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (43),
		.OUT_PKT_BYTE_CNT_L            (41),
		.OUT_PKT_TRANS_COMPRESSED_READ (35),
		.OUT_PKT_BURST_SIZE_H          (49),
		.OUT_PKT_BURST_SIZE_L          (47),
		.OUT_PKT_RESPONSE_STATUS_H     (75),
		.OUT_PKT_RESPONSE_STATUS_L     (74),
		.OUT_PKT_TRANS_EXCLUSIVE       (40),
		.OUT_PKT_BURST_TYPE_H          (51),
		.OUT_PKT_BURST_TYPE_L          (50),
		.OUT_PKT_ORI_BURST_SIZE_L      (76),
		.OUT_PKT_ORI_BURST_SIZE_H      (78),
		.OUT_ST_DATA_W                 (79),
		.ST_CHANNEL_W                  (18),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter (
		.clk                  (video_pll_0_vga_clk_clk),                                                                        //       clk.clk
		.reset                (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                                              //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                                            //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                                                      //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                                        //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                                              //          .ready
		.in_data              (cmd_mux_src_data),                                                                               //          .data
		.out_endofpacket      (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (61),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (70),
		.IN_PKT_BYTE_CNT_L             (68),
		.IN_PKT_TRANS_COMPRESSED_READ  (62),
		.IN_PKT_TRANS_WRITE            (64),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (71),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (102),
		.IN_PKT_RESPONSE_STATUS_L      (101),
		.IN_PKT_TRANS_EXCLUSIVE        (67),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (103),
		.IN_PKT_ORI_BURST_SIZE_H       (105),
		.IN_ST_DATA_W                  (106),
		.OUT_PKT_ADDR_H                (34),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (43),
		.OUT_PKT_BYTE_CNT_L            (41),
		.OUT_PKT_TRANS_COMPRESSED_READ (35),
		.OUT_PKT_BURST_SIZE_H          (49),
		.OUT_PKT_BURST_SIZE_L          (47),
		.OUT_PKT_RESPONSE_STATUS_H     (75),
		.OUT_PKT_RESPONSE_STATUS_L     (74),
		.OUT_PKT_TRANS_EXCLUSIVE       (40),
		.OUT_PKT_BURST_TYPE_H          (51),
		.OUT_PKT_BURST_TYPE_L          (50),
		.OUT_PKT_ORI_BURST_SIZE_L      (76),
		.OUT_PKT_ORI_BURST_SIZE_H      (78),
		.OUT_ST_DATA_W                 (79),
		.ST_CHANNEL_W                  (18),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) cfi_flash_uas_cmd_width_adapter (
		.clk                  (altpll_c0_clk),                                     //       clk.clk
		.reset                (cpu_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_valid             (cmd_mux_017_src_valid),                             //      sink.valid
		.in_channel           (cmd_mux_017_src_channel),                           //          .channel
		.in_startofpacket     (cmd_mux_017_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (cmd_mux_017_src_endofpacket),                       //          .endofpacket
		.in_ready             (cmd_mux_017_src_ready),                             //          .ready
		.in_data              (cmd_mux_017_src_data),                              //          .data
		.out_endofpacket      (cfi_flash_uas_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (cfi_flash_uas_cmd_width_adapter_src_data),          //          .data
		.out_channel          (cfi_flash_uas_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (cfi_flash_uas_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (cfi_flash_uas_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (cfi_flash_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (18),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (altpll_c0_clk),                                                       //        in_clk.clk
		.in_reset          (cpu_reset_reset_bridge_in_reset_reset),                               //  in_clk_reset.reset
		.out_clk           (video_pll_0_vga_clk_clk),                                             //       out_clk.clk
		.out_reset         (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                              //              .channel
		.in_data           (cmd_demux_src0_data),                                                 //              .data
		.out_ready         (crosser_out_ready),                                                   //           out.ready
		.out_valid         (crosser_out_valid),                                                   //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                           //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                             //              .endofpacket
		.out_channel       (crosser_out_channel),                                                 //              .channel
		.out_data          (crosser_out_data),                                                    //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (18),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (altpll_c0_clk),                                                       //        in_clk.clk
		.in_reset          (cpu_reset_reset_bridge_in_reset_reset),                               //  in_clk_reset.reset
		.out_clk           (video_pll_0_vga_clk_clk),                                             //       out_clk.clk
		.out_reset         (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src1_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                              //              .channel
		.in_data           (cmd_demux_src1_data),                                                 //              .data
		.out_ready         (crosser_001_out_ready),                                               //           out.ready
		.out_valid         (crosser_001_out_valid),                                               //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                             //              .channel
		.out_data          (crosser_001_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (18),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (altpll_c0_clk),                                            //        in_clk.clk
		.in_reset          (cpu_reset_reset_bridge_in_reset_reset),                    //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                           //       out_clk.clk
		.out_reset         (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                                     //            in.ready
		.in_valid          (cmd_demux_src4_valid),                                     //              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                             //              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                               //              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                                   //              .channel
		.in_data           (cmd_demux_src4_data),                                      //              .data
		.out_ready         (crosser_002_out_ready),                                    //           out.ready
		.out_valid         (crosser_002_out_valid),                                    //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                            //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                              //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                  //              .channel
		.out_data          (crosser_002_out_data),                                     //              .data
		.in_empty          (1'b0),                                                     //   (terminated)
		.in_error          (1'b0),                                                     //   (terminated)
		.out_empty         (),                                                         //   (terminated)
		.out_error         ()                                                          //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (18),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (video_pll_0_vga_clk_clk),                                             //        in_clk.clk
		.in_reset          (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                                       //       out_clk.clk
		.out_reset         (cpu_reset_reset_bridge_in_reset_reset),                               // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                                //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                                //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                          //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                              //              .channel
		.in_data           (rsp_demux_src0_data),                                                 //              .data
		.out_ready         (crosser_003_out_ready),                                               //           out.ready
		.out_valid         (crosser_003_out_valid),                                               //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                             //              .channel
		.out_data          (crosser_003_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (18),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (video_pll_0_vga_clk_clk),                                             //        in_clk.clk
		.in_reset          (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                                       //       out_clk.clk
		.out_reset         (cpu_reset_reset_bridge_in_reset_reset),                               // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_001_src0_data),                                             //              .data
		.out_ready         (crosser_004_out_ready),                                               //           out.ready
		.out_valid         (crosser_004_out_valid),                                               //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                             //              .channel
		.out_data          (crosser_004_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (18),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_50_clk_clk),                                           //        in_clk.clk
		.in_reset          (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altpll_c0_clk),                                            //       out_clk.clk
		.out_reset         (cpu_reset_reset_bridge_in_reset_reset),                    // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                                 //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                                 //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                         //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                           //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                               //              .channel
		.in_data           (rsp_demux_004_src0_data),                                  //              .data
		.out_ready         (crosser_005_out_ready),                                    //           out.ready
		.out_valid         (crosser_005_out_valid),                                    //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                            //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                              //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                  //              .channel
		.out_data          (crosser_005_out_data),                                     //              .data
		.in_empty          (1'b0),                                                     //   (terminated)
		.in_error          (1'b0),                                                     //   (terminated)
		.out_empty         (),                                                         //   (terminated)
		.out_error         ()                                                          //   (terminated)
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (video_pll_0_vga_clk_clk),                                                               // in_clk_0.clk
		.in_rst_0_reset (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                                         //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                                         //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                                          //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (video_pll_0_vga_clk_clk),                                                                // in_clk_0.clk
		.in_rst_0_reset (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                    // in_rst_0.reset
		.in_0_data      (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                                      //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                                      //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                                       //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (altpll_c0_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                       //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (altpll_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpu_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cpu_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cpu_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_50_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (altpll_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (altpll_pll_slave_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (altpll_pll_slave_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (altpll_pll_slave_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                         //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (altpll_c0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (clock_crossing_io_s0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (clock_crossing_io_s0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (clock_crossing_io_s0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (altpll_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (onchip_memory2_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (onchip_memory2_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                  //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (altpll_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ledr_s1_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (ledr_s1_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (ledr_s1_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                  //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (altpll_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ledg_s1_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (ledg_s1_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (ledg_s1_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                  //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (altpll_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sw_s1_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (sw_s1_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (sw_s1_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                  //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (altpll_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (key_s1_agent_rdata_fifo_src_data),                  //     in_0.data
		.in_0_valid     (key_s1_agent_rdata_fifo_src_valid),                 //         .valid
		.in_0_ready     (key_s1_agent_rdata_fifo_src_ready),                 //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                  //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (altpll_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (floatdata_output_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (floatdata_output_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (floatdata_output_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                  //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (altpll_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sync_data_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (sync_data_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (sync_data_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                  //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (altpll_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pixel_index_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (pixel_index_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (pixel_index_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                  //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (altpll_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (weight_index_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (weight_index_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (weight_index_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                  //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (altpll_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (results_input_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (results_input_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (results_input_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                  //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (altpll_c0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (activations_index_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (activations_index_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (activations_index_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                  //         .error
	);

	DE2_115_SD_CARD_NIOS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (altpll_c0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (cpu_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (cfi_flash_uas_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (cfi_flash_uas_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (cfi_flash_uas_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)         //         .error
	);

endmodule
